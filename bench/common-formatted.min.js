var t = Object.create;

var e = Object.defineProperty;

var r = Object.getOwnPropertyDescriptor;

var s = Object.getOwnPropertyNames;

var n = Object.getPrototypeOf;

var i = Object.prototype.hasOwnProperty;

var a = (t, e) => function r() {
  return e || (0, t[s(t)[0]])((e = {
    exports: {}
  }).exports, e), e.exports;
};

var o = (t, r) => {
  for (var s in r) e(t, s, {
    get: r[s],
    enumerable: true
  });
};

var l = (t, n, a, o) => {
  if (n && typeof n === "object" || typeof n === "function") {
    for (let l of s(n)) if (!i.call(t, l) && l !== a) e(t, l, {
      get: () => n[l],
      enumerable: !(o = r(n, l)) || o.enumerable
    });
  }
  return t;
};

var c = (r, s, i) => (i = r != null ? t(n(r)) : {}, l(s || !r || !r.__esModule ? e(i, "default", {
  value: r,
  enumerable: true
}) : i, r));

var h = a({
  "gen/front_end/core/common/App.js"() {
    "use strict";
  }
});

var u = a({
  "gen/front_end/core/common/JavaScriptMetaData.js"() {
    "use strict";
  }
});

var g = a({
  "gen/front_end/core/common/QueryParamHandler.js"() {
    "use strict";
  }
});

var d = c(h());

var p = {};

o(p, {
  getRegisteredAppProviders: () => w,
  registerAppProvider: () => y
});

import * as f from "./../root/root.js";

var m = [];

function y(t) {
  m.push(t);
}

function w() {
  return m.filter((t => f.Runtime.Runtime.isDescriptorEnabled({
    experiment: void 0,
    condition: t.condition
  }))).sort(((t, e) => {
    const r = t.order || 0;
    const s = e.order || 0;
    return r - s;
  }));
}

var b = {};

o(b, {
  BASE64_CHARS: () => S,
  BASE64_CODES: () => v,
  decode: () => x,
  encode: () => R
});

var S = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

var v = new Uint8Array(123);

for (let t = 0; t < S.length; ++t) {
  v[S.charCodeAt(t)] = t;
}

function x(t) {
  let e = t.length * 3 / 4 >>> 0;
  if (t.charCodeAt(t.length - 2) === 61) {
    e -= 2;
  } else if (t.charCodeAt(t.length - 1) === 61) {
    e -= 1;
  }
  const r = new Uint8Array(e);
  for (let e = 0, s = 0; e < t.length; e += 4) {
    const n = v[t.charCodeAt(e + 0)];
    const i = v[t.charCodeAt(e + 1)];
    const a = v[t.charCodeAt(e + 2)];
    const o = v[t.charCodeAt(e + 3)];
    r[s++] = n << 2 | i >> 4;
    r[s++] = (i & 15) << 4 | a >> 2;
    r[s++] = (a & 3) << 6 | o & 63;
  }
  return r.buffer;
}

function R(t) {
  return new Promise(((e, r) => {
    const s = new FileReader;
    s.onerror = () => r(new Error("failed to convert to base64"));
    s.onload = () => {
      const t = s.result;
      const [, r] = t.split(",", 2);
      e(r);
    };
    s.readAsDataURL(new Blob([ t ]));
  }));
}

var T = {};

o(T, {
  CharacterIdMap: () => z
});

var z = class {
  #t;
  #e;
  #r;
  constructor() {
    this.#t = new Map;
    this.#e = new Map;
    this.#r = 33;
  }
  toChar(t) {
    let e = this.#t.get(t);
    if (!e) {
      if (this.#r >= 65535) {
        throw new Error("CharacterIdMap ran out of capacity!");
      }
      e = String.fromCharCode(this.#r++);
      this.#t.set(t, e);
      this.#e.set(e, t);
    }
    return e;
  }
  fromChar(t) {
    const e = this.#e.get(t);
    if (e === void 0) {
      return null;
    }
    return e;
  }
};

var A = {};

o(A, {
  ColorFunction: () => oe,
  ColorMixRegex: () => me,
  Format: () => re,
  Generator: () => Te,
  HSL: () => le,
  HWB: () => ce,
  IsolationModeHighlight: () => Re,
  LCH: () => ne,
  Lab: () => se,
  Legacy: () => pe,
  Nickname: () => de,
  Nicknames: () => we,
  Oklab: () => ie,
  Oklch: () => ae,
  PageHighlight: () => ve,
  Regex: () => fe,
  ShortHex: () => ge,
  SourceOrderHighlight: () => xe,
  approachColorValue: () => Yt,
  desiredLuminance: () => qt,
  findFgColorForContrast: () => Zt,
  findFgColorForContrastAPCA: () => Kt,
  getFormat: () => Et,
  hsl2rgb: () => jt,
  hsva2rgba: () => Ht,
  parse: () => Ct,
  parseHueNumeric: () => Dt,
  rgb2hsv: () => $t
});

import * as I from "./../platform/platform.js";

var P = {};

o(P, {
  ColorConverter: () => Y
});

var E = .9642;

var L = 1;

var k = .8251;

var C = class {
  values=[ 0, 0, 0 ];
  constructor(t) {
    if (t) {
      this.values = t;
    }
  }
};

var N = class {
  values=[ [ 0, 0, 0 ], [ 0, 0, 0 ], [ 0, 0, 0 ] ];
  constructor(t) {
    if (t) {
      this.values = t;
    }
  }
  multiply(t) {
    const e = new C;
    for (let r = 0; r < 3; ++r) {
      e.values[r] = this.values[r][0] * t.values[0] + this.values[r][1] * t.values[1] + this.values[r][2] * t.values[2];
    }
    return e;
  }
};

var O = class {
  g;
  a;
  b;
  c;
  d;
  e;
  f;
  constructor(t, e, r = 0, s = 0, n = 0, i = 0, a = 0) {
    this.g = t;
    this.a = e;
    this.b = r;
    this.c = s;
    this.d = n;
    this.e = i;
    this.f = a;
  }
  eval(t) {
    const e = t < 0 ? -1 : 1;
    const r = t * e;
    if (r < this.d) {
      return e * (this.c * r + this.f);
    }
    return e * (Math.pow(this.a * r + this.b, this.g) + this.e);
  }
};

var B = {
  sRGB: new O(2.4, 1 / 1.055, .055 / 1.055, 1 / 12.92, .04045, 0, 0),
  sRGB_INVERSE: new O(.416667, 1.13728, -0, 12.92, .0031308, -.0549698, -0),
  proPhotoRGB: new O(1.8, 1),
  proPhotoRGB_INVERSE: new O(.555556, 1, -0, 0, 0, 0, 0),
  k2Dot2: new O(2.2, 1),
  k2Dot2_INVERSE: new O(.454545, 1),
  rec2020: new O(2.22222, .909672, .0903276, .222222, .0812429, 0, 0),
  rec2020_INVERSE: new O(.45, 1.23439, -0, 4.5, .018054, -.0993195, -0)
};

var G = {
  sRGB: new N([ [ .436065674, .385147095, .143066406 ], [ .222488403, .716873169, .06060791 ], [ .013916016, .097076416, .714096069 ] ]),
  sRGB_INVERSE: new N([ [ 3.134112151374599, -1.6173924597114966, -.4906334036481285 ], [ -.9787872938826594, 1.9162795854799963, .0334547139520088 ], [ .07198304248352326, -.2289858493321844, 1.4053851325241447 ] ]),
  displayP3: new N([ [ .515102, .291965, .157153 ], [ .241182, .692236, .0665819 ], [ -.00104941, .0418818, .784378 ] ]),
  displayP3_INVERSE: new N([ [ 2.404045155982687, -.9898986932663839, -.3976317191366333 ], [ -.8422283799266768, 1.7988505115115485, .016048170293157416 ], [ .04818705979712955, -.09737385156228891, 1.2735066448052303 ] ]),
  adobeRGB: new N([ [ .60974, .20528, .14919 ], [ .31111, .62567, .06322 ], [ .01947, .06087, .74457 ] ]),
  adobeRGB_INVERSE: new N([ [ 1.9625385510109137, -.6106892546501431, -.3413827467482388 ], [ -.9787580455521, 1.9161624707082339, .03341676594241408 ], [ .028696263137883395, -.1406807819331586, 1.349252109991369 ] ]),
  rec2020: new N([ [ .673459, .165661, .1251 ], [ .279033, .675338, .0456288 ], [ -.00193139, .0299794, .797162 ] ]),
  rec2020_INVERSE: new N([ [ 1.647275201661012, -.3936024771460771, -.23598028884792507 ], [ -.6826176165196962, 1.647617775014935, .01281626807852422 ], [ .029662725298529837, -.06291668721366285, 1.2533964313435522 ] ]),
  xyz: new N([ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ])
};

function V(t) {
  return t * (Math.PI / 180);
}

function M(t) {
  return t * (180 / Math.PI);
}

function W(t, e, r, s) {
  return [ t.eval(e), t.eval(r), t.eval(s) ];
}

var D = new N([ [ .9999999984505198, .39633779217376786, .2158037580607588 ], [ 1.0000000088817609, -.10556134232365635, -.06385417477170591 ], [ 1.0000000546724108, -.08948418209496575, -1.2914855378640917 ] ]);

var X = new N([ [ .2104542553, .7936177849999999, -.0040720468 ], [ 1.9779984951000003, -2.4285922049999997, .4505937099000001 ], [ .025904037099999982, .7827717662, -.8086757660000001 ] ]);

var F = new N([ [ .8190224432164319, .3619062562801221, -.12887378261216414 ], [ .0329836671980271, .9292868468965546, .03614466816999844 ], [ .048177199566046255, .26423952494422764, .6335478258136937 ] ]);

var U = new N([ [ 1.226879873374156, -.5578149965554814, .2813910501772159 ], [ -.040575762624313734, 1.1122868293970596, -.07171106666151703 ], [ -.07637294974672144, -.4214933239627915, 1.586924024427242 ] ]);

var j = new N([ [ .7976700747153241, .13519395152800417, .03135596341127167 ], [ .28803902352472205, .7118744007923554, 8661179538844252e-20 ], [ 2.739876695467402e-7, -14405226518969991e-22, .825211112593861 ] ]);

var _ = new N([ [ 1.3459533710138858, -.25561367037652133, -.051116041522131374 ], [ -.544600415668951, 1.5081687311475767, .020535163968720935 ], [ -13975622054109725e-22, 2717590904589903e-21, 1.2118111696814942 ] ]);

var H = new N([ [ 1.0478573189120088, .022907374491829943, -.050162247377152525 ], [ .029570500050499514, .9904755577034089, -.017061518194840468 ], [ -.00924047197558879, .015052921526981566, .7519708530777581 ] ]);

var $ = new N([ [ .9555366447632887, -.02306009252137888, .06321844147263304 ], [ -.028315378228764922, 1.009951351591575, .021026001591792402 ], [ .012308773293784308, -.02050053471777469, 1.3301947294775631 ] ]);

var q = new N([ [ 3.2408089365140573, -1.5375788839307314, -.4985609572551541 ], [ -.9692732213205414, 1.876110235238969, .041560501141251774 ], [ .05567030990267439, -.2040007921971802, 1.0571046720577026 ] ]);

var Y = class t {
  static labToXyzd50(t, e, r) {
    let s = (t + 16) / 116;
    let n = s + e / 500;
    let i = s - r / 200;
    function a(t) {
      const e = 24 / 116;
      if (t <= e) {
        return 108 / 841 * (t - 16 / 116);
      }
      return t * t * t;
    }
    n = a(n) * E;
    s = a(s) * L;
    i = a(i) * k;
    return [ n, s, i ];
  }
  static xyzd50ToLab(t, e, r) {
    function s(t) {
      const e = 24 / 116 * (24 / 116) * (24 / 116);
      if (t <= e) {
        return 841 / 108 * t + 16 / 116;
      }
      return Math.pow(t, 1 / 3);
    }
    t = s(t / E);
    e = s(e / L);
    r = s(r / k);
    const n = 116 * e - 16;
    const i = 500 * (t - e);
    const a = 200 * (e - r);
    return [ n, i, a ];
  }
  static oklabToXyzd65(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = D.multiply(s);
    n.values[0] = n.values[0] * n.values[0] * n.values[0];
    n.values[1] = n.values[1] * n.values[1] * n.values[1];
    n.values[2] = n.values[2] * n.values[2] * n.values[2];
    const i = U.multiply(n);
    return i.values;
  }
  static xyzd65ToOklab(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = F.multiply(s);
    n.values[0] = Math.pow(n.values[0], 1 / 3);
    n.values[1] = Math.pow(n.values[1], 1 / 3);
    n.values[2] = Math.pow(n.values[2], 1 / 3);
    const i = X.multiply(n);
    return [ i.values[0], i.values[1], i.values[2] ];
  }
  static lchToLab(t, e, r) {
    if (r === void 0) {
      return [ t, 0, 0 ];
    }
    return [ t, e * Math.cos(V(r)), e * Math.sin(V(r)) ];
  }
  static labToLch(t, e, r) {
    return [ t, Math.sqrt(e * e + r * r), M(Math.atan2(r, e)) ];
  }
  static displayP3ToXyzd50(t, e, r) {
    const [s, n, i] = W(B.sRGB, t, e, r);
    const a = new C([ s, n, i ]);
    const o = G.displayP3.multiply(a);
    return o.values;
  }
  static xyzd50ToDisplayP3(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = G.displayP3_INVERSE.multiply(s);
    return W(B.sRGB_INVERSE, n.values[0], n.values[1], n.values[2]);
  }
  static proPhotoToXyzd50(t, e, r) {
    const [s, n, i] = W(B.proPhotoRGB, t, e, r);
    const a = new C([ s, n, i ]);
    const o = j.multiply(a);
    return o.values;
  }
  static xyzd50ToProPhoto(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = _.multiply(s);
    return W(B.proPhotoRGB_INVERSE, n.values[0], n.values[1], n.values[2]);
  }
  static adobeRGBToXyzd50(t, e, r) {
    const [s, n, i] = W(B.k2Dot2, t, e, r);
    const a = new C([ s, n, i ]);
    const o = G.adobeRGB.multiply(a);
    return o.values;
  }
  static xyzd50ToAdobeRGB(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = G.adobeRGB_INVERSE.multiply(s);
    return W(B.k2Dot2_INVERSE, n.values[0], n.values[1], n.values[2]);
  }
  static rec2020ToXyzd50(t, e, r) {
    const [s, n, i] = W(B.rec2020, t, e, r);
    const a = new C([ s, n, i ]);
    const o = G.rec2020.multiply(a);
    return o.values;
  }
  static xyzd50ToRec2020(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = G.rec2020_INVERSE.multiply(s);
    return W(B.rec2020_INVERSE, n.values[0], n.values[1], n.values[2]);
  }
  static xyzd50ToD65(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = $.multiply(s);
    return n.values;
  }
  static xyzd65ToD50(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = H.multiply(s);
    return n.values;
  }
  static xyzd65TosRGBLinear(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = q.multiply(s);
    return n.values;
  }
  static xyzd50TosRGBLinear(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = G.sRGB_INVERSE.multiply(s);
    return n.values;
  }
  static srgbLinearToXyzd50(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = G.sRGB.multiply(s);
    return n.values;
  }
  static srgbToXyzd50(t, e, r) {
    const [s, n, i] = W(B.sRGB, t, e, r);
    const a = new C([ s, n, i ]);
    const o = G.sRGB.multiply(a);
    return o.values;
  }
  static xyzd50ToSrgb(t, e, r) {
    const s = new C([ t, e, r ]);
    const n = G.sRGB_INVERSE.multiply(s);
    return W(B.sRGB_INVERSE, n.values[0], n.values[1], n.values[2]);
  }
  static oklchToXyzd50(e, r, s) {
    const [n, i, a] = t.lchToLab(e, r, s);
    const [o, l, c] = t.oklabToXyzd65(n, i, a);
    return t.xyzd65ToD50(o, l, c);
  }
  static xyzd50ToOklch(e, r, s) {
    const [n, i, a] = t.xyzd50ToD65(e, r, s);
    const [o, l, c] = t.xyzd65ToOklab(n, i, a);
    return t.labToLch(o, l, c);
  }
};

var Z = {};

o(Z, {
  blendColors: () => K,
  contrastRatio: () => nt,
  contrastRatioAPCA: () => wt,
  contrastRatioByLuminanceAPCA: () => St,
  desiredLuminanceAPCA: () => vt,
  getAPCAThreshold: () => Rt,
  getContrastThreshold: () => At,
  isLargeFont: () => Tt,
  luminance: () => st,
  luminanceAPCA: () => yt,
  rgbToHsl: () => Q,
  rgbToHwb: () => et,
  rgbaToHsla: () => tt,
  rgbaToHwba: () => rt
});

function K(t, e) {
  const r = t[3];
  return [ (1 - r) * e[0] + r * t[0], (1 - r) * e[1] + r * t[1], (1 - r) * e[2] + r * t[2], r + e[3] * (1 - r) ];
}

function J([t, e, r]) {
  const s = Math.max(t, e, r);
  const n = Math.min(t, e, r);
  const i = s - n;
  let a;
  if (n === s) {
    a = 0;
  } else if (t === s) {
    a = (1 / 6 * (e - r) / i + 1) % 1;
  } else if (e === s) {
    a = 1 / 6 * (r - t) / i + 1 / 3;
  } else {
    a = 1 / 6 * (t - e) / i + 2 / 3;
  }
  return a;
}

function Q(t) {
  const [e, r, s] = tt([ ...t, void 0 ]);
  return [ e, r, s ];
}

function tt([t, e, r, s]) {
  const n = Math.max(t, e, r);
  const i = Math.min(t, e, r);
  const a = n - i;
  const o = n + i;
  const l = J([ t, e, r ]);
  const c = .5 * o;
  let h;
  if (c === 0) {
    h = 0;
  } else if (c === 1) {
    h = 0;
  } else if (c <= .5) {
    h = a / o;
  } else {
    h = a / (2 - o);
  }
  return [ l, h, c, s ];
}

function et(t) {
  const [e, r, s] = rt([ ...t, void 0 ]);
  return [ e, r, s ];
}

function rt([t, e, r, s]) {
  const n = J([ t, e, r ]);
  const i = Math.max(t, e, r);
  const a = Math.min(t, e, r);
  return [ n, a, 1 - i, s ];
}

function st([t, e, r]) {
  const s = t <= .04045 ? t / 12.92 : Math.pow((t + .055) / 1.055, 2.4);
  const n = e <= .04045 ? e / 12.92 : Math.pow((e + .055) / 1.055, 2.4);
  const i = r <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  return .2126 * s + .7152 * n + .0722 * i;
}

function nt(t, e) {
  const r = K(t, e);
  const s = st(r);
  const n = st(e);
  const i = (Math.max(s, n) + .05) / (Math.min(s, n) + .05);
  return i;
}

var it = 2.4;

var at = .56;

var ot = .57;

var lt = .65;

var ct = .62;

var ht = .022;

var ut = 1.414;

var gt = 1.14;

var dt = 1.14;

var pt = .027;

var ft = .1;

var mt = 5e-4;

function yt([t, e, r]) {
  const s = Math.pow(t, it);
  const n = Math.pow(e, it);
  const i = Math.pow(r, it);
  return .2126729 * s + .7151522 * n + .072175 * i;
}

function wt(t, e) {
  const r = K(t, e);
  return St(yt(r), yt(e));
}

function bt(t) {
  return t > ht ? t : t + Math.pow(ht - t, ut);
}

function St(t, e) {
  t = bt(t);
  e = bt(e);
  if (Math.abs(t - e) < mt) {
    return 0;
  }
  let r = 0;
  if (e > t) {
    r = (Math.pow(e, at) - Math.pow(t, ot)) * gt;
    r = r < ft ? 0 : r - pt;
  } else {
    r = (Math.pow(e, lt) - Math.pow(t, ct)) * dt;
    r = r > -ft ? 0 : r + pt;
  }
  return r * 100;
}

function vt(t, e, r) {
  t = bt(t);
  e /= 100;
  function s() {
    if (!r) {
      return Math.pow(Math.abs(Math.pow(t, at) - (e + pt) / gt), 1 / ot);
    }
    return Math.pow(Math.abs(Math.pow(t, lt) - (-e - pt) / dt), 1 / ct);
  }
  let n = s();
  if (n < 0 || n > 1) {
    r = !r;
    n = s();
  }
  return n;
}

var xt = [ [ 12, -1, -1, -1, -1, 100, 90, 80, -1, -1 ], [ 14, -1, -1, -1, 100, 90, 80, 60, 60, -1 ], [ 16, -1, -1, 100, 90, 80, 60, 55, 50, 50 ], [ 18, -1, -1, 90, 80, 60, 55, 50, 40, 40 ], [ 24, -1, 100, 80, 60, 55, 50, 40, 38, 35 ], [ 30, -1, 90, 70, 55, 50, 40, 38, 35, 40 ], [ 36, -1, 80, 60, 50, 40, 38, 35, 30, 25 ], [ 48, 100, 70, 55, 40, 38, 35, 30, 25, 20 ], [ 60, 90, 60, 50, 38, 35, 30, 25, 20, 20 ], [ 72, 80, 55, 40, 35, 30, 25, 20, 20, 20 ], [ 96, 70, 50, 35, 30, 25, 20, 20, 20, 20 ], [ 120, 60, 40, 30, 25, 20, 20, 20, 20, 20 ] ];

xt.reverse();

function Rt(t, e) {
  const r = parseFloat(t.replace("px", ""));
  const s = parseFloat(e);
  for (const [t, ...e] of xt) {
    if (r >= t) {
      for (const [t, r] of [ 900, 800, 700, 600, 500, 400, 300, 200, 100 ].entries()) {
        if (s >= r) {
          const r = e[e.length - 1 - t];
          return r === -1 ? null : r;
        }
      }
    }
  }
  return null;
}

function Tt(t, e) {
  const r = [ "bold", "bolder" ];
  const s = parseFloat(t.replace("px", ""));
  const n = isNaN(Number(e)) ? r.includes(e) : Number(e) >= 600;
  const i = s * 72 / 96;
  if (n) {
    return i >= 14;
  }
  return i >= 18;
}

var zt = {
  largeFont: {
    aa: 3,
    aaa: 4.5
  },
  normalFont: {
    aa: 4.5,
    aaa: 7
  }
};

function At(t, e) {
  if (Tt(t, e)) {
    return zt.largeFont;
  }
  return zt.normalFont;
}

function It(t) {
  return (t % 360 + 360) % 360;
}

function Pt(t) {
  const e = t.replace(/(deg|g?rad|turn)$/, "");
  if (isNaN(e) || t.match(/\s+(deg|g?rad|turn)/)) {
    return null;
  }
  const r = parseFloat(e);
  if (t.includes("turn")) {
    return r * 360;
  }
  if (t.includes("grad")) {
    return r * 9 / 10;
  }
  if (t.includes("rad")) {
    return r * 180 / Math.PI;
  }
  return r;
}

function Et(t) {
  switch (t) {
   case "hex":
    return "hex";

   case "hexa":
    return "hexa";

   case "rgb":
    return "rgb";

   case "rgba":
    return "rgba";

   case "hsl":
    return "hsl";

   case "hsla":
    return "hsla";

   case "hwb":
    return "hwb";

   case "hwba":
    return "hwba";

   case "lch":
    return "lch";

   case "oklch":
    return "oklch";

   case "lab":
    return "lab";

   case "oklab":
    return "oklab";
  }
  return Lt(t);
}

function Lt(t) {
  switch (t) {
   case "srgb":
    return "srgb";

   case "srgb-linear":
    return "srgb-linear";

   case "display-p3":
    return "display-p3";

   case "a98-rgb":
    return "a98-rgb";

   case "prophoto-rgb":
    return "prophoto-rgb";

   case "rec2020":
    return "rec2020";

   case "xyz":
    return "xyz";

   case "xyz-d50":
    return "xyz-d50";

   case "xyz-d65":
    return "xyz-d65";
  }
  return null;
}

function kt(t, e) {
  const r = Math.sign(t);
  const s = Math.abs(t);
  const [n, i] = e;
  return r * (s * (i - n) / 100 + n);
}

function Ct(t) {
  if (!t.match(/\s/)) {
    const e = t.toLowerCase().match(/^(?:#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})|(\w+))$/i);
    if (e) {
      if (e[1]) {
        return pe.fromHex(e[1], t);
      }
      if (e[2]) {
        return de.fromName(e[2], t);
      }
      return null;
    }
  }
  const e = t.toLowerCase().match(/^\s*(?:(rgba?)|(hsla?)|(hwba?)|(lch)|(oklch)|(lab)|(oklab)|(color))\((.*)\)\s*$/);
  if (e) {
    const r = Boolean(e[1]);
    const s = Boolean(e[2]);
    const n = Boolean(e[3]);
    const i = Boolean(e[4]);
    const a = Boolean(e[5]);
    const o = Boolean(e[6]);
    const l = Boolean(e[7]);
    const c = Boolean(e[8]);
    const h = e[9];
    if (c) {
      return oe.fromSpec(t, h);
    }
    const u = r || s || n;
    const g = r || s;
    const d = !u;
    const p = Nt(h, {
      allowCommas: g,
      convertNoneToZero: d
    });
    if (!p) {
      return null;
    }
    const f = [ p[0], p[1], p[2], p[3] ];
    if (r) {
      return pe.fromRGBAFunction(p[0], p[1], p[2], p[3], t);
    }
    if (s) {
      return le.fromSpec(f, t);
    }
    if (n) {
      return ce.fromSpec(f, t);
    }
    if (i) {
      return ne.fromSpec(f, t);
    }
    if (a) {
      return ae.fromSpec(f, t);
    }
    if (o) {
      return se.fromSpec(f, t);
    }
    if (l) {
      return ie.fromSpec(f, t);
    }
  }
  return null;
}

function Nt(t, {allowCommas: e, convertNoneToZero: r}) {
  const s = t.trim();
  let n = [];
  if (e) {
    n = s.split(/\s*,\s*/);
  }
  if (!e || n.length === 1) {
    n = s.split(/\s+/);
    if (n[3] === "/") {
      n.splice(3, 1);
      if (n.length !== 4) {
        return null;
      }
    } else if (n.length > 2 && n[2].indexOf("/") !== -1 || n.length > 3 && n[3].indexOf("/") !== -1) {
      const t = n.slice(2, 4).join("");
      n = n.slice(0, 2).concat(t.split(/\//)).concat(n.slice(4));
    } else if (n.length >= 4) {
      return null;
    }
  }
  if (n.length !== 3 && n.length !== 4 || n.indexOf("") > -1) {
    return null;
  }
  if (r) {
    return n.map((t => t === "none" ? "0" : t));
  }
  return n;
}

function Ot(t, {min: e, max: r}) {
  if (t === null) {
    return t;
  }
  if (e !== void 0) {
    t = Math.max(t, e);
  }
  if (r !== void 0) {
    t = Math.min(t, r);
  }
  return t;
}

function Bt(t, e) {
  if (!t.endsWith("%")) {
    return null;
  }
  const r = parseFloat(t.substr(0, t.length - 1));
  return isNaN(r) ? null : kt(r, e);
}

function Gt(t) {
  const e = parseFloat(t);
  return isNaN(e) ? null : e;
}

function Vt(t) {
  if (t === void 0) {
    return null;
  }
  return Ot(Bt(t, [ 0, 1 ]) ?? Gt(t), {
    min: 0,
    max: 1
  });
}

function Mt(t, e = [ 0, 1 ]) {
  if (isNaN(t.replace("%", ""))) {
    return null;
  }
  const r = parseFloat(t);
  if (t.indexOf("%") !== -1) {
    if (t.indexOf("%") !== t.length - 1) {
      return null;
    }
    return kt(r, e);
  }
  return r;
}

function Wt(t) {
  const e = Mt(t);
  if (e === null) {
    return null;
  }
  if (t.indexOf("%") !== -1) {
    return e;
  }
  return e / 255;
}

function Dt(t) {
  const e = t.replace(/(deg|g?rad|turn)$/, "");
  if (isNaN(e) || t.match(/\s+(deg|g?rad|turn)/)) {
    return null;
  }
  const r = parseFloat(e);
  if (t.indexOf("turn") !== -1) {
    return r % 1;
  }
  if (t.indexOf("grad") !== -1) {
    return r / 400 % 1;
  }
  if (t.indexOf("rad") !== -1) {
    return r / (2 * Math.PI) % 1;
  }
  return r / 360 % 1;
}

function Xt(t) {
  if (t.indexOf("%") !== t.length - 1 || isNaN(t.replace("%", ""))) {
    return null;
  }
  const e = parseFloat(t);
  return e / 100;
}

function Ft(t) {
  return Mt(t);
}

function Ut(t) {
  const e = t[0];
  let r = t[1];
  const s = t[2];
  const n = (2 - r) * s;
  if (s === 0 || r === 0) {
    r = 0;
  } else {
    r *= s / (n < 1 ? n : 2 - n);
  }
  return [ e, r, n / 2, t[3] ];
}

function jt(t) {
  const e = t[0];
  let r = t[1];
  const s = t[2];
  function n(t, e, r) {
    if (r < 0) {
      r += 1;
    } else if (r > 1) {
      r -= 1;
    }
    if (r * 6 < 1) {
      return t + (e - t) * r * 6;
    }
    if (r * 2 < 1) {
      return e;
    }
    if (r * 3 < 2) {
      return t + (e - t) * (2 / 3 - r) * 6;
    }
    return t;
  }
  if (r < 0) {
    r = 0;
  }
  let i;
  if (s <= .5) {
    i = s * (1 + r);
  } else {
    i = s + r - s * r;
  }
  const a = 2 * s - i;
  const o = e + 1 / 3;
  const l = e;
  const c = e - 1 / 3;
  return [ n(a, i, o), n(a, i, l), n(a, i, c), t[3] ];
}

function _t(t) {
  const e = t[0];
  const r = t[1];
  const s = t[2];
  const n = r / (r + s);
  let i = [ n, n, n, t[3] ];
  if (r + s < 1) {
    i = jt([ e, 1, .5, t[3] ]);
    for (let t = 0; t < 3; ++t) {
      i[t] += r - (r + s) * i[t];
    }
  }
  return i;
}

function Ht(t) {
  return jt(Ut(t));
}

function $t(t) {
  const e = Q(t);
  const r = e[0];
  let s = e[1];
  const n = e[2];
  s *= n < .5 ? n : 1 - n;
  return [ r, s !== 0 ? 2 * s / (n + s) : 0, n + s ];
}

function qt(t, e, r) {
  function s() {
    if (r) {
      return (t + .05) * e - .05;
    }
    return (t + .05) / e - .05;
  }
  let n = s();
  if (n < 0 || n > 1) {
    r = !r;
    n = s();
  }
  return n;
}

function Yt(t, e, r, s, n) {
  const i = 2e-4;
  let a = t[r];
  let o = 1;
  let l = n(t) - s;
  let c = Math.sign(l);
  for (let e = 100; e; e--) {
    if (Math.abs(l) < i) {
      t[r] = a;
      return a;
    }
    const e = Math.sign(l);
    if (e !== c) {
      o /= 2;
      c = e;
    } else if (a < 0 || a > 1) {
      return null;
    }
    a += o * (r === 2 ? -l : l);
    t[r] = a;
    l = n(t) - s;
  }
  return null;
}

function Zt(t, e, r) {
  const s = t.as("hsl").hsva();
  const n = e.rgba();
  const i = t => st(K(pe.fromHSVA(t).rgba(), n));
  const a = st(e.rgba());
  const o = i(s);
  const l = o > a;
  const c = qt(a, r, l);
  const h = 1;
  const u = 2;
  if (Yt(s, n, u, c, i)) {
    return pe.fromHSVA(s);
  }
  s[u] = 1;
  if (Yt(s, n, h, c, i)) {
    return pe.fromHSVA(s);
  }
  return null;
}

function Kt(t, e, r) {
  const s = t.as("hsl").hsva();
  const n = e.rgba();
  const i = t => yt(pe.fromHSVA(t).rgba());
  const a = yt(e.rgba());
  const o = i(s);
  const l = o >= a;
  const c = vt(a, r, l);
  const h = 1;
  const u = 2;
  if (Yt(s, n, u, c, i)) {
    const t = pe.fromHSVA(s);
    if (Math.abs(wt(e.rgba(), t.rgba())) >= r) {
      return t;
    }
  }
  s[u] = 1;
  if (Yt(s, n, h, c, i)) {
    const t = pe.fromHSVA(s);
    if (Math.abs(wt(e.rgba(), t.rgba())) >= r) {
      return t;
    }
  }
  return null;
}

var Jt = .01;

var Qt = 1;

function te(t, e, r = Jt) {
  if (Array.isArray(t) && Array.isArray(e)) {
    if (t.length !== e.length) {
      return false;
    }
    for (const r in t) {
      if (!te(t[r], e[r])) {
        return false;
      }
    }
    return true;
  }
  if (Array.isArray(t) || Array.isArray(e)) {
    return false;
  }
  if (t === null || e === null) {
    return t === e;
  }
  return Math.abs(t - e) < r;
}

function ee(t, e, r = Jt) {
  return t - e <= r;
}

var re = (t => {
  t["HEX"] = "hex";
  t["HEXA"] = "hexa";
  t["RGB"] = "rgb";
  t["RGBA"] = "rgba";
  t["HSL"] = "hsl";
  t["HSLA"] = "hsla";
  t["HWB"] = "hwb";
  t["HWBA"] = "hwba";
  t["LCH"] = "lch";
  t["OKLCH"] = "oklch";
  t["LAB"] = "lab";
  t["OKLAB"] = "oklab";
  t["SRGB"] = "srgb";
  t["SRGB_LINEAR"] = "srgb-linear";
  t["DISPLAY_P3"] = "display-p3";
  t["A98_RGB"] = "a98-rgb";
  t["PROPHOTO_RGB"] = "prophoto-rgb";
  t["REC_2020"] = "rec2020";
  t["XYZ"] = "xyz";
  t["XYZ_D50"] = "xyz-d50";
  t["XYZ_D65"] = "xyz-d65";
  return t;
})(re || {});

var se = class t {
  l;
  a;
  b;
  alpha;
  #s;
  #n;
  static #i={
    ["hex"]: t => new pe(t.#a(false), "hex"),
    ["hexa"]: t => new pe(t.#a(true), "hexa"),
    ["rgb"]: t => new pe(t.#a(false), "rgb"),
    ["rgba"]: t => new pe(t.#a(true), "rgba"),
    ["hsl"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hsla"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hwb"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["hwba"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["lch"]: t => new ne(...Y.labToLch(t.l, t.a, t.b), t.alpha),
    ["oklch"]: t => new ae(...Y.xyzd50ToOklch(...t.#o()), t.alpha),
    ["lab"]: t => t,
    ["oklab"]: t => new ie(...Y.xyzd65ToOklab(...Y.xyzd50ToD65(...t.#o())), t.alpha),
    ["srgb"]: t => new oe("srgb", ...Y.xyzd50ToSrgb(...t.#o()), t.alpha),
    ["srgb-linear"]: t => new oe("srgb-linear", ...Y.xyzd50TosRGBLinear(...t.#o()), t.alpha),
    ["display-p3"]: t => new oe("display-p3", ...Y.xyzd50ToDisplayP3(...t.#o()), t.alpha),
    ["a98-rgb"]: t => new oe("a98-rgb", ...Y.xyzd50ToAdobeRGB(...t.#o()), t.alpha),
    ["prophoto-rgb"]: t => new oe("prophoto-rgb", ...Y.xyzd50ToProPhoto(...t.#o()), t.alpha),
    ["rec2020"]: t => new oe("rec2020", ...Y.xyzd50ToRec2020(...t.#o()), t.alpha),
    ["xyz"]: t => new oe("xyz", ...Y.xyzd50ToD65(...t.#o()), t.alpha),
    ["xyz-d50"]: t => new oe("xyz-d50", ...t.#o(), t.alpha),
    ["xyz-d65"]: t => new oe("xyz-d65", ...Y.xyzd50ToD65(...t.#o()), t.alpha)
  };
  #o() {
    return Y.labToXyzd50(this.l, this.a, this.b);
  }
  #a(t = true) {
    const e = Y.xyzd50ToSrgb(...this.#o());
    if (t) {
      return [ ...e, this.alpha ?? void 0 ];
    }
    return e;
  }
  constructor(t, e, r, s, n) {
    this.#n = [ t, e, r ];
    this.l = Ot(t, {
      min: 0,
      max: 100
    });
    if (te(this.l, 0, Qt) || te(this.l, 100, Qt)) {
      e = r = 0;
    }
    this.a = e;
    this.b = r;
    this.alpha = Ot(s, {
      min: 0,
      max: 1
    });
    this.#s = n;
  }
  is(t) {
    return t === this.format();
  }
  as(e) {
    return t.#i[e](this);
  }
  asLegacyColor() {
    return this.as("rgba");
  }
  equal(t) {
    const e = t.as("lab");
    return te(e.l, this.l, Qt) && te(e.a, this.a) && te(e.b, this.b) && te(e.alpha, this.alpha);
  }
  format() {
    return "lab";
  }
  setAlpha(e) {
    return new t(this.l, this.a, this.b, e, void 0);
  }
  asString(t) {
    if (t) {
      return this.as(t).asString();
    }
    return this.#l(this.l, this.a, this.b);
  }
  #l(t, e, r) {
    const s = this.alpha === null || te(this.alpha, 1) ? "" : ` / ${I.StringUtilities.stringifyWithPrecision(this.alpha)}`;
    return `lab(${I.StringUtilities.stringifyWithPrecision(t, 0)} ${I.StringUtilities.stringifyWithPrecision(e)} ${I.StringUtilities.stringifyWithPrecision(r)}${s})`;
  }
  getAuthoredText() {
    return this.#s ?? null;
  }
  getRawParameters() {
    return [ ...this.#n ];
  }
  getAsRawString(t) {
    if (t) {
      return this.as(t).getAsRawString();
    }
    return this.#l(...this.#n);
  }
  isGamutClipped() {
    return false;
  }
  static fromSpec(e, r) {
    const s = Bt(e[0], [ 0, 100 ]) ?? Gt(e[0]);
    if (s === null) {
      return null;
    }
    const n = Bt(e[1], [ 0, 125 ]) ?? Gt(e[1]);
    if (n === null) {
      return null;
    }
    const i = Bt(e[2], [ 0, 125 ]) ?? Gt(e[2]);
    if (i === null) {
      return null;
    }
    const a = Vt(e[3]);
    return new t(s, n, i, a, r);
  }
};

var ne = class t {
  #n;
  l;
  c;
  h;
  alpha;
  #s;
  static #i={
    ["hex"]: t => new pe(t.#a(false), "hex"),
    ["hexa"]: t => new pe(t.#a(true), "hexa"),
    ["rgb"]: t => new pe(t.#a(false), "rgb"),
    ["rgba"]: t => new pe(t.#a(true), "rgba"),
    ["hsl"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hsla"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hwb"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["hwba"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["lch"]: t => t,
    ["oklch"]: t => new ae(...Y.xyzd50ToOklch(...t.#o()), t.alpha),
    ["lab"]: t => new se(...Y.lchToLab(t.l, t.c, t.h), t.alpha),
    ["oklab"]: t => new ie(...Y.xyzd65ToOklab(...Y.xyzd50ToD65(...t.#o())), t.alpha),
    ["srgb"]: t => new oe("srgb", ...Y.xyzd50ToSrgb(...t.#o()), t.alpha),
    ["srgb-linear"]: t => new oe("srgb-linear", ...Y.xyzd50TosRGBLinear(...t.#o()), t.alpha),
    ["display-p3"]: t => new oe("display-p3", ...Y.xyzd50ToDisplayP3(...t.#o()), t.alpha),
    ["a98-rgb"]: t => new oe("a98-rgb", ...Y.xyzd50ToAdobeRGB(...t.#o()), t.alpha),
    ["prophoto-rgb"]: t => new oe("prophoto-rgb", ...Y.xyzd50ToProPhoto(...t.#o()), t.alpha),
    ["rec2020"]: t => new oe("rec2020", ...Y.xyzd50ToRec2020(...t.#o()), t.alpha),
    ["xyz"]: t => new oe("xyz", ...Y.xyzd50ToD65(...t.#o()), t.alpha),
    ["xyz-d50"]: t => new oe("xyz-d50", ...t.#o(), t.alpha),
    ["xyz-d65"]: t => new oe("xyz-d65", ...Y.xyzd50ToD65(...t.#o()), t.alpha)
  };
  #o() {
    return Y.labToXyzd50(...Y.lchToLab(this.l, this.c, this.h));
  }
  #a(t = true) {
    const e = Y.xyzd50ToSrgb(...this.#o());
    if (t) {
      return [ ...e, this.alpha ?? void 0 ];
    }
    return e;
  }
  constructor(t, e, r, s, n) {
    this.#n = [ t, e, r ];
    this.l = Ot(t, {
      min: 0,
      max: 100
    });
    e = te(this.l, 0, Qt) || te(this.l, 100, Qt) ? 0 : e;
    this.c = Ot(e, {
      min: 0
    });
    r = te(e, 0) ? 0 : r;
    this.h = It(r);
    this.alpha = Ot(s, {
      min: 0,
      max: 1
    });
    this.#s = n;
  }
  asLegacyColor() {
    return this.as("rgba");
  }
  is(t) {
    return t === this.format();
  }
  as(e) {
    return t.#i[e](this);
  }
  equal(t) {
    const e = t.as("lch");
    return te(e.l, this.l, Qt) && te(e.c, this.c) && te(e.h, this.h) && te(e.alpha, this.alpha);
  }
  format() {
    return "lch";
  }
  setAlpha(e) {
    return new t(this.l, this.c, this.h, e);
  }
  asString(t) {
    if (t) {
      return this.as(t).asString();
    }
    return this.#l(this.l, this.c, this.h);
  }
  #l(t, e, r) {
    const s = this.alpha === null || te(this.alpha, 1) ? "" : ` / ${I.StringUtilities.stringifyWithPrecision(this.alpha)}`;
    return `lch(${I.StringUtilities.stringifyWithPrecision(t, 0)} ${I.StringUtilities.stringifyWithPrecision(e)} ${I.StringUtilities.stringifyWithPrecision(r)}${s})`;
  }
  getAuthoredText() {
    return this.#s ?? null;
  }
  getRawParameters() {
    return [ ...this.#n ];
  }
  getAsRawString(t) {
    if (t) {
      return this.as(t).getAsRawString();
    }
    return this.#l(...this.#n);
  }
  isGamutClipped() {
    return false;
  }
  isHuePowerless() {
    return te(this.c, 0);
  }
  static fromSpec(e, r) {
    const s = Bt(e[0], [ 0, 100 ]) ?? Gt(e[0]);
    if (s === null) {
      return null;
    }
    const n = Bt(e[1], [ 0, 150 ]) ?? Gt(e[1]);
    if (n === null) {
      return null;
    }
    const i = Pt(e[2]);
    if (i === null) {
      return null;
    }
    const a = Vt(e[3]);
    return new t(s, n, i, a, r);
  }
};

var ie = class t {
  #n;
  l;
  a;
  b;
  alpha;
  #s;
  static #i={
    ["hex"]: t => new pe(t.#a(false), "hex"),
    ["hexa"]: t => new pe(t.#a(true), "hexa"),
    ["rgb"]: t => new pe(t.#a(false), "rgb"),
    ["rgba"]: t => new pe(t.#a(true), "rgba"),
    ["hsl"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hsla"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hwb"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["hwba"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["lch"]: t => new ne(...Y.labToLch(...Y.xyzd50ToLab(...t.#o())), t.alpha),
    ["oklch"]: t => new ae(...Y.xyzd50ToOklch(...t.#o()), t.alpha),
    ["lab"]: t => new se(...Y.xyzd50ToLab(...t.#o()), t.alpha),
    ["oklab"]: t => t,
    ["srgb"]: t => new oe("srgb", ...Y.xyzd50ToSrgb(...t.#o()), t.alpha),
    ["srgb-linear"]: t => new oe("srgb-linear", ...Y.xyzd50TosRGBLinear(...t.#o()), t.alpha),
    ["display-p3"]: t => new oe("display-p3", ...Y.xyzd50ToDisplayP3(...t.#o()), t.alpha),
    ["a98-rgb"]: t => new oe("a98-rgb", ...Y.xyzd50ToAdobeRGB(...t.#o()), t.alpha),
    ["prophoto-rgb"]: t => new oe("prophoto-rgb", ...Y.xyzd50ToProPhoto(...t.#o()), t.alpha),
    ["rec2020"]: t => new oe("rec2020", ...Y.xyzd50ToRec2020(...t.#o()), t.alpha),
    ["xyz"]: t => new oe("xyz", ...Y.xyzd50ToD65(...t.#o()), t.alpha),
    ["xyz-d50"]: t => new oe("xyz-d50", ...t.#o(), t.alpha),
    ["xyz-d65"]: t => new oe("xyz-d65", ...Y.xyzd50ToD65(...t.#o()), t.alpha)
  };
  #o() {
    return Y.xyzd65ToD50(...Y.oklabToXyzd65(this.l, this.a, this.b));
  }
  #a(t = true) {
    const e = Y.xyzd50ToSrgb(...this.#o());
    if (t) {
      return [ ...e, this.alpha ?? void 0 ];
    }
    return e;
  }
  constructor(t, e, r, s, n) {
    this.#n = [ t, e, r ];
    this.l = Ot(t, {
      min: 0,
      max: 1
    });
    if (te(this.l, 0) || te(this.l, 1)) {
      e = r = 0;
    }
    this.a = e;
    this.b = r;
    this.alpha = Ot(s, {
      min: 0,
      max: 1
    });
    this.#s = n;
  }
  asLegacyColor() {
    return this.as("rgba");
  }
  is(t) {
    return t === this.format();
  }
  as(e) {
    return t.#i[e](this);
  }
  equal(t) {
    const e = t.as("oklab");
    return te(e.l, this.l) && te(e.a, this.a) && te(e.b, this.b) && te(e.alpha, this.alpha);
  }
  format() {
    return "oklab";
  }
  setAlpha(e) {
    return new t(this.l, this.a, this.b, e);
  }
  asString(t) {
    if (t) {
      return this.as(t).asString();
    }
    return this.#l(this.l, this.a, this.b);
  }
  #l(t, e, r) {
    const s = this.alpha === null || te(this.alpha, 1) ? "" : ` / ${I.StringUtilities.stringifyWithPrecision(this.alpha)}`;
    return `oklab(${I.StringUtilities.stringifyWithPrecision(t)} ${I.StringUtilities.stringifyWithPrecision(e)} ${I.StringUtilities.stringifyWithPrecision(r)}${s})`;
  }
  getAuthoredText() {
    return this.#s ?? null;
  }
  getRawParameters() {
    return [ ...this.#n ];
  }
  getAsRawString(t) {
    if (t) {
      return this.as(t).getAsRawString();
    }
    return this.#l(...this.#n);
  }
  isGamutClipped() {
    return false;
  }
  static fromSpec(e, r) {
    const s = Bt(e[0], [ 0, 1 ]) ?? Gt(e[0]);
    if (s === null) {
      return null;
    }
    const n = Bt(e[1], [ 0, .4 ]) ?? Gt(e[1]);
    if (n === null) {
      return null;
    }
    const i = Bt(e[2], [ 0, .4 ]) ?? Gt(e[2]);
    if (i === null) {
      return null;
    }
    const a = Vt(e[3]);
    return new t(s, n, i, a, r);
  }
};

var ae = class t {
  #n;
  l;
  c;
  h;
  alpha;
  #s;
  static #i={
    ["hex"]: t => new pe(t.#a(false), "hex"),
    ["hexa"]: t => new pe(t.#a(true), "hexa"),
    ["rgb"]: t => new pe(t.#a(false), "rgb"),
    ["rgba"]: t => new pe(t.#a(true), "rgba"),
    ["hsl"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hsla"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hwb"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["hwba"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["lch"]: t => new ne(...Y.labToLch(...Y.xyzd50ToLab(...t.#o())), t.alpha),
    ["oklch"]: t => t,
    ["lab"]: t => new se(...Y.xyzd50ToLab(...t.#o()), t.alpha),
    ["oklab"]: t => new ie(...Y.xyzd65ToOklab(...Y.xyzd50ToD65(...t.#o())), t.alpha),
    ["srgb"]: t => new oe("srgb", ...Y.xyzd50ToSrgb(...t.#o()), t.alpha),
    ["srgb-linear"]: t => new oe("srgb-linear", ...Y.xyzd50TosRGBLinear(...t.#o()), t.alpha),
    ["display-p3"]: t => new oe("display-p3", ...Y.xyzd50ToDisplayP3(...t.#o()), t.alpha),
    ["a98-rgb"]: t => new oe("a98-rgb", ...Y.xyzd50ToAdobeRGB(...t.#o()), t.alpha),
    ["prophoto-rgb"]: t => new oe("prophoto-rgb", ...Y.xyzd50ToProPhoto(...t.#o()), t.alpha),
    ["rec2020"]: t => new oe("rec2020", ...Y.xyzd50ToRec2020(...t.#o()), t.alpha),
    ["xyz"]: t => new oe("xyz", ...Y.xyzd50ToD65(...t.#o()), t.alpha),
    ["xyz-d50"]: t => new oe("xyz-d50", ...t.#o(), t.alpha),
    ["xyz-d65"]: t => new oe("xyz-d65", ...Y.xyzd50ToD65(...t.#o()), t.alpha)
  };
  #o() {
    return Y.oklchToXyzd50(this.l, this.c, this.h);
  }
  #a(t = true) {
    const e = Y.xyzd50ToSrgb(...this.#o());
    if (t) {
      return [ ...e, this.alpha ?? void 0 ];
    }
    return e;
  }
  constructor(t, e, r, s, n) {
    this.#n = [ t, e, r ];
    this.l = Ot(t, {
      min: 0,
      max: 1
    });
    e = te(this.l, 0) || te(this.l, 1) ? 0 : e;
    this.c = Ot(e, {
      min: 0
    });
    r = te(e, 0) ? 0 : r;
    this.h = It(r);
    this.alpha = Ot(s, {
      min: 0,
      max: 1
    });
    this.#s = n;
  }
  asLegacyColor() {
    return this.as("rgba");
  }
  is(t) {
    return t === this.format();
  }
  as(e) {
    return t.#i[e](this);
  }
  equal(t) {
    const e = t.as("oklch");
    return te(e.l, this.l) && te(e.c, this.c) && te(e.h, this.h) && te(e.alpha, this.alpha);
  }
  format() {
    return "oklch";
  }
  setAlpha(e) {
    return new t(this.l, this.c, this.h, e);
  }
  asString(t) {
    if (t) {
      return this.as(t).asString();
    }
    return this.#l(this.l, this.c, this.h);
  }
  #l(t, e, r) {
    const s = this.alpha === null || te(this.alpha, 1) ? "" : ` / ${I.StringUtilities.stringifyWithPrecision(this.alpha)}`;
    return `oklch(${I.StringUtilities.stringifyWithPrecision(t)} ${I.StringUtilities.stringifyWithPrecision(e)} ${I.StringUtilities.stringifyWithPrecision(r)}${s})`;
  }
  getAuthoredText() {
    return this.#s ?? null;
  }
  getRawParameters() {
    return [ ...this.#n ];
  }
  getAsRawString(t) {
    if (t) {
      return this.as(t).getAsRawString();
    }
    return this.#l(...this.#n);
  }
  isGamutClipped() {
    return false;
  }
  static fromSpec(e, r) {
    const s = Bt(e[0], [ 0, 1 ]) ?? Gt(e[0]);
    if (s === null) {
      return null;
    }
    const n = Bt(e[1], [ 0, .4 ]) ?? Gt(e[1]);
    if (n === null) {
      return null;
    }
    const i = Pt(e[2]);
    if (i === null) {
      return null;
    }
    const a = Vt(e[3]);
    return new t(s, n, i, a, r);
  }
};

var oe = class t {
  #n;
  p0;
  p1;
  p2;
  alpha;
  colorSpace;
  #s;
  static #i={
    ["hex"]: t => new pe(t.#a(false), "hex"),
    ["hexa"]: t => new pe(t.#a(true), "hexa"),
    ["rgb"]: t => new pe(t.#a(false), "rgb"),
    ["rgba"]: t => new pe(t.#a(true), "rgba"),
    ["hsl"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hsla"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hwb"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["hwba"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["lch"]: t => new ne(...Y.labToLch(...Y.xyzd50ToLab(...t.#o())), t.alpha),
    ["oklch"]: t => new ae(...Y.xyzd50ToOklch(...t.#o()), t.alpha),
    ["lab"]: t => new se(...Y.xyzd50ToLab(...t.#o()), t.alpha),
    ["oklab"]: t => new ie(...Y.xyzd65ToOklab(...Y.xyzd50ToD65(...t.#o())), t.alpha),
    ["srgb"]: e => new t("srgb", ...Y.xyzd50ToSrgb(...e.#o()), e.alpha),
    ["srgb-linear"]: e => new t("srgb-linear", ...Y.xyzd50TosRGBLinear(...e.#o()), e.alpha),
    ["display-p3"]: e => new t("display-p3", ...Y.xyzd50ToDisplayP3(...e.#o()), e.alpha),
    ["a98-rgb"]: e => new t("a98-rgb", ...Y.xyzd50ToAdobeRGB(...e.#o()), e.alpha),
    ["prophoto-rgb"]: e => new t("prophoto-rgb", ...Y.xyzd50ToProPhoto(...e.#o()), e.alpha),
    ["rec2020"]: e => new t("rec2020", ...Y.xyzd50ToRec2020(...e.#o()), e.alpha),
    ["xyz"]: e => new t("xyz", ...Y.xyzd50ToD65(...e.#o()), e.alpha),
    ["xyz-d50"]: e => new t("xyz-d50", ...e.#o(), e.alpha),
    ["xyz-d65"]: e => new t("xyz-d65", ...Y.xyzd50ToD65(...e.#o()), e.alpha)
  };
  #o() {
    const [t, e, r] = this.#n;
    switch (this.colorSpace) {
     case "srgb":
      return Y.srgbToXyzd50(t, e, r);

     case "srgb-linear":
      return Y.srgbLinearToXyzd50(t, e, r);

     case "display-p3":
      return Y.displayP3ToXyzd50(t, e, r);

     case "a98-rgb":
      return Y.adobeRGBToXyzd50(t, e, r);

     case "prophoto-rgb":
      return Y.proPhotoToXyzd50(t, e, r);

     case "rec2020":
      return Y.rec2020ToXyzd50(t, e, r);

     case "xyz-d50":
      return [ t, e, r ];

     case "xyz":
     case "xyz-d65":
      return Y.xyzd65ToD50(t, e, r);
    }
    throw new Error("Invalid color space");
  }
  #a(t = true) {
    const [e, r, s] = this.#n;
    const n = this.colorSpace === "srgb" ? [ e, r, s ] : [ ...Y.xyzd50ToSrgb(...this.#o()) ];
    if (t) {
      return [ ...n, this.alpha ?? void 0 ];
    }
    return n;
  }
  constructor(t, e, r, s, n, i) {
    this.#n = [ e, r, s ];
    this.colorSpace = t;
    this.#s = i;
    if (this.colorSpace !== "xyz-d50" && this.colorSpace !== "xyz-d65" && this.colorSpace !== "xyz") {
      e = Ot(e, {
        min: 0,
        max: 1
      });
      r = Ot(r, {
        min: 0,
        max: 1
      });
      s = Ot(s, {
        min: 0,
        max: 1
      });
    }
    this.p0 = e;
    this.p1 = r;
    this.p2 = s;
    this.alpha = Ot(n, {
      min: 0,
      max: 1
    });
  }
  asLegacyColor() {
    return this.as("rgba");
  }
  is(t) {
    return t === this.format();
  }
  as(e) {
    if (this.colorSpace === e) {
      return this;
    }
    return t.#i[e](this);
  }
  equal(t) {
    const e = t.as(this.colorSpace);
    return te(this.p0, e.p0) && te(this.p1, e.p1) && te(this.p2, e.p2) && te(this.alpha, e.alpha);
  }
  format() {
    return this.colorSpace;
  }
  setAlpha(e) {
    return new t(this.colorSpace, this.p0, this.p1, this.p2, e);
  }
  asString(t) {
    if (t) {
      return this.as(t).asString();
    }
    return this.#l(this.p0, this.p1, this.p2);
  }
  #l(t, e, r) {
    const s = this.alpha === null || te(this.alpha, 1) ? "" : ` / ${I.StringUtilities.stringifyWithPrecision(this.alpha)}`;
    return `color(${this.colorSpace} ${I.StringUtilities.stringifyWithPrecision(t)} ${I.StringUtilities.stringifyWithPrecision(e)} ${I.StringUtilities.stringifyWithPrecision(r)}${s})`;
  }
  getAuthoredText() {
    return this.#s ?? null;
  }
  getRawParameters() {
    return [ ...this.#n ];
  }
  getAsRawString(t) {
    if (t) {
      return this.as(t).getAsRawString();
    }
    return this.#l(...this.#n);
  }
  isGamutClipped() {
    if (this.colorSpace !== "xyz-d50" && this.colorSpace !== "xyz-d65" && this.colorSpace !== "xyz") {
      return !te(this.#n, [ this.p0, this.p1, this.p2 ]);
    }
    return false;
  }
  static fromSpec(e, r) {
    const [s, n] = r.split("/", 2);
    const i = s.trim().split(/\s+/);
    const [a, ...o] = i;
    const l = Lt(a);
    if (!l) {
      return null;
    }
    if (o.length === 0 && n === void 0) {
      return new t(l, 0, 0, 0, null, e);
    }
    if (o.length === 0 && n !== void 0 && n.trim().split(/\s+/).length > 1) {
      return null;
    }
    if (o.length > 3) {
      return null;
    }
    const c = o.map((t => t === "none" ? "0" : t));
    const h = c.map((t => Mt(t, [ 0, 1 ])));
    const u = h.includes(null);
    if (u) {
      return null;
    }
    const g = n ? Mt(n, [ 0, 1 ]) ?? 1 : 1;
    const d = [ h[0] ?? 0, h[1] ?? 0, h[2] ?? 0, g ];
    return new t(l, ...d, e);
  }
};

var le = class t {
  h;
  s;
  l;
  alpha;
  #n;
  #s;
  static #i={
    ["hex"]: t => new pe(t.#a(false), "hex"),
    ["hexa"]: t => new pe(t.#a(true), "hexa"),
    ["rgb"]: t => new pe(t.#a(false), "rgb"),
    ["rgba"]: t => new pe(t.#a(true), "rgba"),
    ["hsl"]: t => t,
    ["hsla"]: t => t,
    ["hwb"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["hwba"]: t => new ce(...et(t.#a(false)), t.alpha),
    ["lch"]: t => new ne(...Y.labToLch(...Y.xyzd50ToLab(...t.#o())), t.alpha),
    ["oklch"]: t => new ae(...Y.xyzd50ToOklch(...t.#o()), t.alpha),
    ["lab"]: t => new se(...Y.xyzd50ToLab(...t.#o()), t.alpha),
    ["oklab"]: t => new ie(...Y.xyzd65ToOklab(...Y.xyzd50ToD65(...t.#o())), t.alpha),
    ["srgb"]: t => new oe("srgb", ...Y.xyzd50ToSrgb(...t.#o()), t.alpha),
    ["srgb-linear"]: t => new oe("srgb-linear", ...Y.xyzd50TosRGBLinear(...t.#o()), t.alpha),
    ["display-p3"]: t => new oe("display-p3", ...Y.xyzd50ToDisplayP3(...t.#o()), t.alpha),
    ["a98-rgb"]: t => new oe("a98-rgb", ...Y.xyzd50ToAdobeRGB(...t.#o()), t.alpha),
    ["prophoto-rgb"]: t => new oe("prophoto-rgb", ...Y.xyzd50ToProPhoto(...t.#o()), t.alpha),
    ["rec2020"]: t => new oe("rec2020", ...Y.xyzd50ToRec2020(...t.#o()), t.alpha),
    ["xyz"]: t => new oe("xyz", ...Y.xyzd50ToD65(...t.#o()), t.alpha),
    ["xyz-d50"]: t => new oe("xyz-d50", ...t.#o(), t.alpha),
    ["xyz-d65"]: t => new oe("xyz-d65", ...Y.xyzd50ToD65(...t.#o()), t.alpha)
  };
  #a(t = true) {
    const e = jt([ this.h, this.s, this.l, 0 ]);
    if (t) {
      return [ e[0], e[1], e[2], this.alpha ?? void 0 ];
    }
    return [ e[0], e[1], e[2] ];
  }
  #o() {
    const t = this.#a(false);
    return Y.srgbToXyzd50(t[0], t[1], t[2]);
  }
  constructor(t, e, r, s, n) {
    this.#n = [ t, e, r ];
    this.l = Ot(r, {
      min: 0,
      max: 1
    });
    e = te(this.l, 0) || te(this.l, 1) ? 0 : e;
    this.s = Ot(e, {
      min: 0,
      max: 1
    });
    t = te(this.s, 0) ? 0 : t;
    this.h = It(t * 360) / 360;
    this.alpha = Ot(s ?? null, {
      min: 0,
      max: 1
    });
    this.#s = n;
  }
  equal(t) {
    const e = t.as("hsl");
    return te(this.h, e.h) && te(this.s, e.s) && te(this.l, e.l) && te(this.alpha, e.alpha);
  }
  asString(t) {
    if (t) {
      return this.as(t).asString();
    }
    return this.#l(this.h, this.s, this.l);
  }
  #l(t, e, r) {
    const s = I.StringUtilities.sprintf("hsl(%sdeg %s% %s%", I.StringUtilities.stringifyWithPrecision(t * 360), I.StringUtilities.stringifyWithPrecision(e * 100), I.StringUtilities.stringifyWithPrecision(r * 100));
    if (this.alpha !== null && this.alpha !== 1) {
      return s + I.StringUtilities.sprintf(" / %s%)", I.StringUtilities.stringifyWithPrecision(this.alpha * 100));
    }
    return s + ")";
  }
  setAlpha(e) {
    return new t(this.h, this.s, this.l, e);
  }
  format() {
    return this.alpha === null || this.alpha === 1 ? "hsl" : "hsla";
  }
  is(t) {
    return t === this.format();
  }
  as(e) {
    if (e === this.format()) {
      return this;
    }
    return t.#i[e](this);
  }
  asLegacyColor() {
    return this.as("rgba");
  }
  getAuthoredText() {
    return this.#s ?? null;
  }
  getRawParameters() {
    return [ ...this.#n ];
  }
  getAsRawString(t) {
    if (t) {
      return this.as(t).getAsRawString();
    }
    return this.#l(...this.#n);
  }
  isGamutClipped() {
    return !ee(this.#n[1], 1) || !ee(0, this.#n[1]);
  }
  static fromSpec(e, r) {
    const s = Dt(e[0]);
    if (s === null) {
      return null;
    }
    const n = Xt(e[1]);
    if (n === null) {
      return null;
    }
    const i = Xt(e[2]);
    if (i === null) {
      return null;
    }
    const a = Vt(e[3]);
    return new t(s, n, i, a, r);
  }
  hsva() {
    const t = this.s * (this.l < .5 ? this.l : 1 - this.l);
    return [ this.h, t !== 0 ? 2 * t / (this.l + t) : 0, this.l + t, this.alpha ?? 1 ];
  }
  canonicalHSLA() {
    return [ Math.round(this.h * 360), Math.round(this.s * 100), Math.round(this.l * 100), this.alpha ?? 1 ];
  }
};

var ce = class t {
  h;
  w;
  b;
  alpha;
  #n;
  #s;
  static #i={
    ["hex"]: t => new pe(t.#a(false), "hex"),
    ["hexa"]: t => new pe(t.#a(true), "hexa"),
    ["rgb"]: t => new pe(t.#a(false), "rgb"),
    ["rgba"]: t => new pe(t.#a(true), "rgba"),
    ["hsl"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hsla"]: t => new le(...Q(t.#a(false)), t.alpha),
    ["hwb"]: t => t,
    ["hwba"]: t => t,
    ["lch"]: t => new ne(...Y.labToLch(...Y.xyzd50ToLab(...t.#o())), t.alpha),
    ["oklch"]: t => new ae(...Y.xyzd50ToOklch(...t.#o()), t.alpha),
    ["lab"]: t => new se(...Y.xyzd50ToLab(...t.#o()), t.alpha),
    ["oklab"]: t => new ie(...Y.xyzd65ToOklab(...Y.xyzd50ToD65(...t.#o())), t.alpha),
    ["srgb"]: t => new oe("srgb", ...Y.xyzd50ToSrgb(...t.#o()), t.alpha),
    ["srgb-linear"]: t => new oe("srgb-linear", ...Y.xyzd50TosRGBLinear(...t.#o()), t.alpha),
    ["display-p3"]: t => new oe("display-p3", ...Y.xyzd50ToDisplayP3(...t.#o()), t.alpha),
    ["a98-rgb"]: t => new oe("a98-rgb", ...Y.xyzd50ToAdobeRGB(...t.#o()), t.alpha),
    ["prophoto-rgb"]: t => new oe("prophoto-rgb", ...Y.xyzd50ToProPhoto(...t.#o()), t.alpha),
    ["rec2020"]: t => new oe("rec2020", ...Y.xyzd50ToRec2020(...t.#o()), t.alpha),
    ["xyz"]: t => new oe("xyz", ...Y.xyzd50ToD65(...t.#o()), t.alpha),
    ["xyz-d50"]: t => new oe("xyz-d50", ...t.#o(), t.alpha),
    ["xyz-d65"]: t => new oe("xyz-d65", ...Y.xyzd50ToD65(...t.#o()), t.alpha)
  };
  #a(t = true) {
    const e = _t([ this.h, this.w, this.b, 0 ]);
    if (t) {
      return [ e[0], e[1], e[2], this.alpha ?? void 0 ];
    }
    return [ e[0], e[1], e[2] ];
  }
  #o() {
    const t = this.#a(false);
    return Y.srgbToXyzd50(t[0], t[1], t[2]);
  }
  constructor(t, e, r, s, n) {
    this.#n = [ t, e, r ];
    this.w = Ot(e, {
      min: 0,
      max: 1
    });
    this.b = Ot(r, {
      min: 0,
      max: 1
    });
    t = ee(1, this.w + this.b) ? 0 : t;
    this.h = It(t * 360) / 360;
    this.alpha = Ot(s, {
      min: 0,
      max: 1
    });
    if (ee(1, this.w + this.b)) {
      const t = this.w / this.b;
      this.b = 1 / (1 + t);
      this.w = 1 - this.b;
    }
    this.#s = n;
  }
  equal(t) {
    const e = t.as("hwb");
    return te(this.h, e.h) && te(this.w, e.w) && te(this.b, e.b) && te(this.alpha, e.alpha);
  }
  asString(t) {
    if (t) {
      return this.as(t).asString();
    }
    return this.#l(this.h, this.w, this.b);
  }
  #l(t, e, r) {
    const s = I.StringUtilities.sprintf("hwb(%sdeg %s% %s%", I.StringUtilities.stringifyWithPrecision(t * 360), I.StringUtilities.stringifyWithPrecision(e * 100), I.StringUtilities.stringifyWithPrecision(r * 100));
    if (this.alpha !== null && this.alpha !== 1) {
      return s + I.StringUtilities.sprintf(" / %s%)", I.StringUtilities.stringifyWithPrecision(this.alpha * 100));
    }
    return s + ")";
  }
  setAlpha(e) {
    return new t(this.h, this.w, this.b, e, this.#s);
  }
  format() {
    return this.alpha !== null && !te(this.alpha, 1) ? "hwba" : "hwb";
  }
  is(t) {
    return t === this.format();
  }
  as(e) {
    if (e === this.format()) {
      return this;
    }
    return t.#i[e](this);
  }
  asLegacyColor() {
    return this.as("rgba");
  }
  getAuthoredText() {
    return this.#s ?? null;
  }
  canonicalHWBA() {
    return [ Math.round(this.h * 360), Math.round(this.w * 100), Math.round(this.b * 100), this.alpha ?? 1 ];
  }
  getRawParameters() {
    return [ ...this.#n ];
  }
  getAsRawString(t) {
    if (t) {
      return this.as(t).getAsRawString();
    }
    return this.#l(...this.#n);
  }
  isGamutClipped() {
    return !ee(this.#n[1], 1) || !ee(0, this.#n[1]) || !ee(this.#n[2], 1) || !ee(0, this.#n[2]);
  }
  static fromSpec(e, r) {
    const s = Dt(e[0]);
    if (s === null) {
      return null;
    }
    const n = Xt(e[1]);
    if (n === null) {
      return null;
    }
    const i = Xt(e[2]);
    if (i === null) {
      return null;
    }
    const a = Vt(e[3]);
    return new t(s, n, i, a, r);
  }
};

function he(t) {
  return Math.round(t * 255);
}

var ue = class {
  color;
  constructor(t) {
    this.color = t;
  }
  get alpha() {
    return this.color.alpha;
  }
  equal(t) {
    return this.color.equal(t);
  }
  setAlpha(t) {
    return this.color.setAlpha(t);
  }
  format() {
    return (this.alpha ?? 1) !== 1 ? "hexa" : "hex";
  }
  as(t) {
    return this.color.as(t);
  }
  is(t) {
    return this.color.is(t);
  }
  asLegacyColor() {
    return this.color.asLegacyColor();
  }
  getAuthoredText() {
    return this.color.getAuthoredText();
  }
  getRawParameters() {
    return this.color.getRawParameters();
  }
  isGamutClipped() {
    return this.color.isGamutClipped();
  }
  asString(t) {
    if (t) {
      return this.as(t).asString();
    }
    const [e, r, s] = this.color.rgba();
    return this.stringify(e, r, s);
  }
  getAsRawString(t) {
    if (t) {
      return this.as(t).getAsRawString();
    }
    const [e, r, s] = this.getRawParameters();
    return this.stringify(e, r, s);
  }
};

var ge = class t extends ue {
  setAlpha(e) {
    return new t(this.color.setAlpha(e));
  }
  asString(t) {
    return t && t !== this.format() ? super.as(t).asString() : super.asString();
  }
  stringify(t, e, r) {
    function s(t) {
      return (Math.round(t * 255) / 17).toString(16);
    }
    if (this.color.hasAlpha()) {
      return I.StringUtilities.sprintf("#%s%s%s%s", s(t), s(e), s(r), s(this.alpha ?? 1)).toLowerCase();
    }
    return I.StringUtilities.sprintf("#%s%s%s", s(t), s(e), s(r)).toLowerCase();
  }
};

var de = class t extends ue {
  nickname;
  constructor(t, e) {
    super(e);
    this.nickname = t;
  }
  static fromName(e, r) {
    const s = e.toLowerCase();
    const n = we.get(s);
    if (n !== void 0) {
      return new t(s, pe.fromRGBA(n, r));
    }
    return null;
  }
  stringify() {
    return this.nickname;
  }
  getAsRawString(t) {
    return this.color.getAsRawString(t);
  }
};

var pe = class t {
  #n;
  #c;
  #s;
  #h;
  static #i={
    ["hex"]: e => new t(e.#c, "hex"),
    ["hexa"]: e => new t(e.#c, "hexa"),
    ["rgb"]: e => new t(e.#c, "rgb"),
    ["rgba"]: e => new t(e.#c, "rgba"),
    ["hsl"]: t => new le(...Q([ t.#c[0], t.#c[1], t.#c[2] ]), t.alpha),
    ["hsla"]: t => new le(...Q([ t.#c[0], t.#c[1], t.#c[2] ]), t.alpha),
    ["hwb"]: t => new ce(...et([ t.#c[0], t.#c[1], t.#c[2] ]), t.alpha),
    ["hwba"]: t => new ce(...et([ t.#c[0], t.#c[1], t.#c[2] ]), t.alpha),
    ["lch"]: t => new ne(...Y.labToLch(...Y.xyzd50ToLab(...t.#o())), t.alpha),
    ["oklch"]: t => new ae(...Y.xyzd50ToOklch(...t.#o()), t.alpha),
    ["lab"]: t => new se(...Y.xyzd50ToLab(...t.#o()), t.alpha),
    ["oklab"]: t => new ie(...Y.xyzd65ToOklab(...Y.xyzd50ToD65(...t.#o())), t.alpha),
    ["srgb"]: t => new oe("srgb", ...Y.xyzd50ToSrgb(...t.#o()), t.alpha),
    ["srgb-linear"]: t => new oe("srgb-linear", ...Y.xyzd50TosRGBLinear(...t.#o()), t.alpha),
    ["display-p3"]: t => new oe("display-p3", ...Y.xyzd50ToDisplayP3(...t.#o()), t.alpha),
    ["a98-rgb"]: t => new oe("a98-rgb", ...Y.xyzd50ToAdobeRGB(...t.#o()), t.alpha),
    ["prophoto-rgb"]: t => new oe("prophoto-rgb", ...Y.xyzd50ToProPhoto(...t.#o()), t.alpha),
    ["rec2020"]: t => new oe("rec2020", ...Y.xyzd50ToRec2020(...t.#o()), t.alpha),
    ["xyz"]: t => new oe("xyz", ...Y.xyzd50ToD65(...t.#o()), t.alpha),
    ["xyz-d50"]: t => new oe("xyz-d50", ...t.#o(), t.alpha),
    ["xyz-d65"]: t => new oe("xyz-d65", ...Y.xyzd50ToD65(...t.#o()), t.alpha)
  };
  #o() {
    const [t, e, r] = this.#c;
    return Y.srgbToXyzd50(t, e, r);
  }
  get alpha() {
    switch (this.format()) {
     case "hexa":
     case "rgba":
      return this.#c[3];

     default:
      return null;
    }
  }
  asLegacyColor() {
    return this;
  }
  nickname() {
    const t = be.get(String(this.canonicalRGBA()));
    return t ? new de(t, this) : null;
  }
  shortHex() {
    for (let t = 0; t < 4; ++t) {
      const e = Math.round(this.#c[t] * 255);
      if (e % 17) {
        return null;
      }
    }
    return new ge(this);
  }
  constructor(t, e, r) {
    this.#s = r || null;
    this.#h = e;
    this.#n = [ t[0], t[1], t[2] ];
    this.#c = [ Ot(t[0], {
      min: 0,
      max: 1
    }), Ot(t[1], {
      min: 0,
      max: 1
    }), Ot(t[2], {
      min: 0,
      max: 1
    }), Ot(t[3] ?? 1, {
      min: 0,
      max: 1
    }) ];
  }
  static fromHex(e, r) {
    e = e.toLowerCase();
    const s = e.length === 4 || e.length === 8;
    const n = s ? "hexa" : "hex";
    const i = e.length <= 4;
    if (i) {
      e = e.charAt(0) + e.charAt(0) + e.charAt(1) + e.charAt(1) + e.charAt(2) + e.charAt(2) + e.charAt(3) + e.charAt(3);
    }
    const a = parseInt(e.substring(0, 2), 16);
    const o = parseInt(e.substring(2, 4), 16);
    const l = parseInt(e.substring(4, 6), 16);
    let c = 1;
    if (e.length === 8) {
      c = parseInt(e.substring(6, 8), 16) / 255;
    }
    const h = new t([ a / 255, o / 255, l / 255, c ], n, r);
    return i ? new ge(h) : h;
  }
  static fromRGBAFunction(e, r, s, n, i) {
    const a = [ Wt(e), Wt(r), Wt(s), n ? Ft(n) : 1 ];
    if (!I.ArrayUtilities.arrayDoesNotContainNullOrUndefined(a)) {
      return null;
    }
    return new t(a, n ? "rgba" : "rgb", i);
  }
  static fromRGBA(e, r) {
    return new t([ e[0] / 255, e[1] / 255, e[2] / 255, e[3] ], "rgba", r);
  }
  static fromHSVA(e) {
    const r = Ht(e);
    return new t(r, "rgba");
  }
  is(t) {
    return t === this.format();
  }
  as(e) {
    if (e === this.format()) {
      return this;
    }
    return t.#i[e](this);
  }
  format() {
    return this.#h;
  }
  hasAlpha() {
    return this.#c[3] !== 1;
  }
  detectHEXFormat() {
    const t = this.hasAlpha();
    return t ? "hexa" : "hex";
  }
  asString(t) {
    if (t) {
      return this.as(t).asString();
    }
    return this.#l(t, this.#c[0], this.#c[1], this.#c[2]);
  }
  #l(t, e, r, s) {
    if (!t) {
      t = this.#h;
    }
    function n(t) {
      const e = Math.round(t * 255).toString(16);
      return e.length === 1 ? "0" + e : e;
    }
    switch (t) {
     case "rgb":
     case "rgba":
      {
        const t = I.StringUtilities.sprintf("rgb(%d %d %d", he(e), he(r), he(s));
        if (this.hasAlpha()) {
          return t + I.StringUtilities.sprintf(" / %d%)", Math.round(this.#c[3] * 100));
        }
        return t + ")";
      }

     case "hex":
     case "hexa":
      {
        if (this.hasAlpha()) {
          return I.StringUtilities.sprintf("#%s%s%s%s", n(e), n(r), n(s), n(this.#c[3])).toLowerCase();
        }
        return I.StringUtilities.sprintf("#%s%s%s", n(e), n(r), n(s)).toLowerCase();
      }
    }
  }
  getAuthoredText() {
    return this.#s ?? null;
  }
  getRawParameters() {
    return [ ...this.#n ];
  }
  getAsRawString(t) {
    if (t) {
      return this.as(t).getAsRawString();
    }
    return this.#l(t, ...this.#n);
  }
  isGamutClipped() {
    return !te(this.#n.map(he), [ this.#c[0], this.#c[1], this.#c[2] ].map(he), Qt);
  }
  rgba() {
    return [ ...this.#c ];
  }
  canonicalRGBA() {
    const t = new Array(4);
    for (let e = 0; e < 3; ++e) {
      t[e] = Math.round(this.#c[e] * 255);
    }
    t[3] = this.#c[3];
    return t;
  }
  toProtocolRGBA() {
    const t = this.canonicalRGBA();
    const e = {
      r: t[0],
      g: t[1],
      b: t[2],
      a: void 0
    };
    if (t[3] !== 1) {
      e.a = t[3];
    }
    return e;
  }
  invert() {
    const e = [ 0, 0, 0, 0 ];
    e[0] = 1 - this.#c[0];
    e[1] = 1 - this.#c[1];
    e[2] = 1 - this.#c[2];
    e[3] = this.#c[3];
    return new t(e, "rgba");
  }
  grayscale() {
    const [e, r, s] = this.#c;
    const n = e * .299 + r * .587 + s * .114;
    return new t([ n, n, n, .5 ], "rgba");
  }
  setAlpha(e) {
    const r = [ ...this.#c ];
    r[3] = e;
    return new t(r, "rgba");
  }
  blendWith(e) {
    const r = K(e.#c, this.#c);
    return new t(r, "rgba");
  }
  blendWithAlpha(e) {
    const r = [ ...this.#c ];
    r[3] *= e;
    return new t(r, "rgba");
  }
  setFormat(t) {
    this.#h = t;
  }
  equal(t) {
    const e = t.as(this.#h);
    return te(he(this.#c[0]), he(e.#c[0]), Qt) && te(he(this.#c[1]), he(e.#c[1]), Qt) && te(he(this.#c[2]), he(e.#c[2]), Qt) && te(this.#c[3], e.#c[3]);
  }
};

var fe = /((?:rgba?|hsla?|hwba?|lab|lch|oklab|oklch|color)\([^)]+\)|#[0-9a-fA-F]{8}|#[0-9a-fA-F]{6}|#[0-9a-fA-F]{3,4}|\b[a-zA-Z]+\b(?!-))/g;

var me = /color-mix\(.*,\s*(?<firstColor>.+)\s*,\s*(?<secondColor>.+)\s*\)/g;

var ye = [ [ "aliceblue", [ 240, 248, 255 ] ], [ "antiquewhite", [ 250, 235, 215 ] ], [ "aqua", [ 0, 255, 255 ] ], [ "aquamarine", [ 127, 255, 212 ] ], [ "azure", [ 240, 255, 255 ] ], [ "beige", [ 245, 245, 220 ] ], [ "bisque", [ 255, 228, 196 ] ], [ "black", [ 0, 0, 0 ] ], [ "blanchedalmond", [ 255, 235, 205 ] ], [ "blue", [ 0, 0, 255 ] ], [ "blueviolet", [ 138, 43, 226 ] ], [ "brown", [ 165, 42, 42 ] ], [ "burlywood", [ 222, 184, 135 ] ], [ "cadetblue", [ 95, 158, 160 ] ], [ "chartreuse", [ 127, 255, 0 ] ], [ "chocolate", [ 210, 105, 30 ] ], [ "coral", [ 255, 127, 80 ] ], [ "cornflowerblue", [ 100, 149, 237 ] ], [ "cornsilk", [ 255, 248, 220 ] ], [ "crimson", [ 237, 20, 61 ] ], [ "cyan", [ 0, 255, 255 ] ], [ "darkblue", [ 0, 0, 139 ] ], [ "darkcyan", [ 0, 139, 139 ] ], [ "darkgoldenrod", [ 184, 134, 11 ] ], [ "darkgray", [ 169, 169, 169 ] ], [ "darkgrey", [ 169, 169, 169 ] ], [ "darkgreen", [ 0, 100, 0 ] ], [ "darkkhaki", [ 189, 183, 107 ] ], [ "darkmagenta", [ 139, 0, 139 ] ], [ "darkolivegreen", [ 85, 107, 47 ] ], [ "darkorange", [ 255, 140, 0 ] ], [ "darkorchid", [ 153, 50, 204 ] ], [ "darkred", [ 139, 0, 0 ] ], [ "darksalmon", [ 233, 150, 122 ] ], [ "darkseagreen", [ 143, 188, 143 ] ], [ "darkslateblue", [ 72, 61, 139 ] ], [ "darkslategray", [ 47, 79, 79 ] ], [ "darkslategrey", [ 47, 79, 79 ] ], [ "darkturquoise", [ 0, 206, 209 ] ], [ "darkviolet", [ 148, 0, 211 ] ], [ "deeppink", [ 255, 20, 147 ] ], [ "deepskyblue", [ 0, 191, 255 ] ], [ "dimgray", [ 105, 105, 105 ] ], [ "dimgrey", [ 105, 105, 105 ] ], [ "dodgerblue", [ 30, 144, 255 ] ], [ "firebrick", [ 178, 34, 34 ] ], [ "floralwhite", [ 255, 250, 240 ] ], [ "forestgreen", [ 34, 139, 34 ] ], [ "fuchsia", [ 255, 0, 255 ] ], [ "gainsboro", [ 220, 220, 220 ] ], [ "ghostwhite", [ 248, 248, 255 ] ], [ "gold", [ 255, 215, 0 ] ], [ "goldenrod", [ 218, 165, 32 ] ], [ "gray", [ 128, 128, 128 ] ], [ "grey", [ 128, 128, 128 ] ], [ "green", [ 0, 128, 0 ] ], [ "greenyellow", [ 173, 255, 47 ] ], [ "honeydew", [ 240, 255, 240 ] ], [ "hotpink", [ 255, 105, 180 ] ], [ "indianred", [ 205, 92, 92 ] ], [ "indigo", [ 75, 0, 130 ] ], [ "ivory", [ 255, 255, 240 ] ], [ "khaki", [ 240, 230, 140 ] ], [ "lavender", [ 230, 230, 250 ] ], [ "lavenderblush", [ 255, 240, 245 ] ], [ "lawngreen", [ 124, 252, 0 ] ], [ "lemonchiffon", [ 255, 250, 205 ] ], [ "lightblue", [ 173, 216, 230 ] ], [ "lightcoral", [ 240, 128, 128 ] ], [ "lightcyan", [ 224, 255, 255 ] ], [ "lightgoldenrodyellow", [ 250, 250, 210 ] ], [ "lightgreen", [ 144, 238, 144 ] ], [ "lightgray", [ 211, 211, 211 ] ], [ "lightgrey", [ 211, 211, 211 ] ], [ "lightpink", [ 255, 182, 193 ] ], [ "lightsalmon", [ 255, 160, 122 ] ], [ "lightseagreen", [ 32, 178, 170 ] ], [ "lightskyblue", [ 135, 206, 250 ] ], [ "lightslategray", [ 119, 136, 153 ] ], [ "lightslategrey", [ 119, 136, 153 ] ], [ "lightsteelblue", [ 176, 196, 222 ] ], [ "lightyellow", [ 255, 255, 224 ] ], [ "lime", [ 0, 255, 0 ] ], [ "limegreen", [ 50, 205, 50 ] ], [ "linen", [ 250, 240, 230 ] ], [ "magenta", [ 255, 0, 255 ] ], [ "maroon", [ 128, 0, 0 ] ], [ "mediumaquamarine", [ 102, 205, 170 ] ], [ "mediumblue", [ 0, 0, 205 ] ], [ "mediumorchid", [ 186, 85, 211 ] ], [ "mediumpurple", [ 147, 112, 219 ] ], [ "mediumseagreen", [ 60, 179, 113 ] ], [ "mediumslateblue", [ 123, 104, 238 ] ], [ "mediumspringgreen", [ 0, 250, 154 ] ], [ "mediumturquoise", [ 72, 209, 204 ] ], [ "mediumvioletred", [ 199, 21, 133 ] ], [ "midnightblue", [ 25, 25, 112 ] ], [ "mintcream", [ 245, 255, 250 ] ], [ "mistyrose", [ 255, 228, 225 ] ], [ "moccasin", [ 255, 228, 181 ] ], [ "navajowhite", [ 255, 222, 173 ] ], [ "navy", [ 0, 0, 128 ] ], [ "oldlace", [ 253, 245, 230 ] ], [ "olive", [ 128, 128, 0 ] ], [ "olivedrab", [ 107, 142, 35 ] ], [ "orange", [ 255, 165, 0 ] ], [ "orangered", [ 255, 69, 0 ] ], [ "orchid", [ 218, 112, 214 ] ], [ "palegoldenrod", [ 238, 232, 170 ] ], [ "palegreen", [ 152, 251, 152 ] ], [ "paleturquoise", [ 175, 238, 238 ] ], [ "palevioletred", [ 219, 112, 147 ] ], [ "papayawhip", [ 255, 239, 213 ] ], [ "peachpuff", [ 255, 218, 185 ] ], [ "peru", [ 205, 133, 63 ] ], [ "pink", [ 255, 192, 203 ] ], [ "plum", [ 221, 160, 221 ] ], [ "powderblue", [ 176, 224, 230 ] ], [ "purple", [ 128, 0, 128 ] ], [ "rebeccapurple", [ 102, 51, 153 ] ], [ "red", [ 255, 0, 0 ] ], [ "rosybrown", [ 188, 143, 143 ] ], [ "royalblue", [ 65, 105, 225 ] ], [ "saddlebrown", [ 139, 69, 19 ] ], [ "salmon", [ 250, 128, 114 ] ], [ "sandybrown", [ 244, 164, 96 ] ], [ "seagreen", [ 46, 139, 87 ] ], [ "seashell", [ 255, 245, 238 ] ], [ "sienna", [ 160, 82, 45 ] ], [ "silver", [ 192, 192, 192 ] ], [ "skyblue", [ 135, 206, 235 ] ], [ "slateblue", [ 106, 90, 205 ] ], [ "slategray", [ 112, 128, 144 ] ], [ "slategrey", [ 112, 128, 144 ] ], [ "snow", [ 255, 250, 250 ] ], [ "springgreen", [ 0, 255, 127 ] ], [ "steelblue", [ 70, 130, 180 ] ], [ "tan", [ 210, 180, 140 ] ], [ "teal", [ 0, 128, 128 ] ], [ "thistle", [ 216, 191, 216 ] ], [ "tomato", [ 255, 99, 71 ] ], [ "turquoise", [ 64, 224, 208 ] ], [ "violet", [ 238, 130, 238 ] ], [ "wheat", [ 245, 222, 179 ] ], [ "white", [ 255, 255, 255 ] ], [ "whitesmoke", [ 245, 245, 245 ] ], [ "yellow", [ 255, 255, 0 ] ], [ "yellowgreen", [ 154, 205, 50 ] ], [ "transparent", [ 0, 0, 0, 0 ] ] ];

console.assert(ye.every((([t]) => t.toLowerCase() === t)), "All color nicknames must be lowercase.");

var we = new Map(ye);

var be = new Map(ye.map((([t, [e, r, s, n = 1]]) => [ String([ e, r, s, n ]), t ])));

var Se = [ 127, 32, 210 ];

var ve = {
  Content: pe.fromRGBA([ 111, 168, 220, .66 ]),
  ContentLight: pe.fromRGBA([ 111, 168, 220, .5 ]),
  ContentOutline: pe.fromRGBA([ 9, 83, 148 ]),
  Padding: pe.fromRGBA([ 147, 196, 125, .55 ]),
  PaddingLight: pe.fromRGBA([ 147, 196, 125, .4 ]),
  Border: pe.fromRGBA([ 255, 229, 153, .66 ]),
  BorderLight: pe.fromRGBA([ 255, 229, 153, .5 ]),
  Margin: pe.fromRGBA([ 246, 178, 107, .66 ]),
  MarginLight: pe.fromRGBA([ 246, 178, 107, .5 ]),
  EventTarget: pe.fromRGBA([ 255, 196, 196, .66 ]),
  Shape: pe.fromRGBA([ 96, 82, 177, .8 ]),
  ShapeMargin: pe.fromRGBA([ 96, 82, 127, .6 ]),
  CssGrid: pe.fromRGBA([ 75, 0, 130, 1 ]),
  LayoutLine: pe.fromRGBA([ ...Se, 1 ]),
  GridBorder: pe.fromRGBA([ ...Se, 1 ]),
  GapBackground: pe.fromRGBA([ ...Se, .3 ]),
  GapHatch: pe.fromRGBA([ ...Se, .8 ]),
  GridAreaBorder: pe.fromRGBA([ 26, 115, 232, 1 ])
};

var xe = {
  ParentOutline: pe.fromRGBA([ 224, 90, 183, 1 ]),
  ChildOutline: pe.fromRGBA([ 0, 120, 212, 1 ])
};

var Re = {
  Resizer: pe.fromRGBA([ 222, 225, 230, 1 ]),
  ResizerHandle: pe.fromRGBA([ 166, 166, 166, 1 ]),
  Mask: pe.fromRGBA([ 248, 249, 249, 1 ])
};

var Te = class {
  #u;
  #g;
  #d;
  #p;
  #f;
  constructor(t, e, r, s) {
    this.#u = t || {
      min: 0,
      max: 360,
      count: void 0
    };
    this.#g = e || 67;
    this.#d = r || 80;
    this.#p = s || 1;
    this.#f = new Map;
  }
  setColorForID(t, e) {
    this.#f.set(t, e);
  }
  colorForID(t) {
    let e = this.#f.get(t);
    if (!e) {
      e = this.generateColorForID(t);
      this.#f.set(t, e);
    }
    return e;
  }
  generateColorForID(t) {
    const e = I.StringUtilities.hashCode(t);
    const r = this.indexToValueInSpace(e, this.#u);
    const s = this.indexToValueInSpace(e >> 8, this.#g);
    const n = this.indexToValueInSpace(e >> 16, this.#d);
    const i = this.indexToValueInSpace(e >> 24, this.#p);
    const a = `hsl(${r}deg ${s}% ${n}%`;
    if (i !== 1) {
      return `${a} / ${Math.floor(i * 100)}%)`;
    }
    return `${a})`;
  }
  indexToValueInSpace(t, e) {
    if (typeof e === "number") {
      return e;
    }
    const r = e.count || e.max - e.min;
    t %= r;
    return e.min + Math.floor(t / (r - 1) * (e.max - e.min));
  }
};

var ze = {};

o(ze, {
  Console: () => Xe,
  Events: () => Fe,
  FrontendMessageSource: () => je,
  Message: () => _e,
  MessageLevel: () => Ue
});

var Ae = {};

o(Ae, {
  ObjectWrapper: () => Ie,
  eventMixin: () => Pe
});

var Ie = class {
  listeners;
  addEventListener(t, e, r) {
    if (!this.listeners) {
      this.listeners = new Map;
    }
    let s = this.listeners.get(t);
    if (!s) {
      s = new Set;
      this.listeners.set(t, s);
    }
    s.add({
      thisObject: r,
      listener: e
    });
    return {
      eventTarget: this,
      eventType: t,
      thisObject: r,
      listener: e
    };
  }
  once(t) {
    return new Promise((e => {
      const r = this.addEventListener(t, (s => {
        this.removeEventListener(t, r.listener);
        e(s.data);
      }));
    }));
  }
  removeEventListener(t, e, r) {
    const s = this.listeners?.get(t);
    if (!s) {
      return;
    }
    for (const t of s) {
      if (t.listener === e && t.thisObject === r) {
        t.disposed = true;
        s.delete(t);
      }
    }
    if (!s.size) {
      this.listeners?.delete(t);
    }
  }
  hasEventListeners(t) {
    return Boolean(this.listeners && this.listeners.has(t));
  }
  dispatchEventToListeners(t, ...[e]) {
    const r = this.listeners?.get(t);
    if (!r) {
      return;
    }
    const s = {
      data: e,
      source: this
    };
    for (const t of [ ...r ]) {
      if (!t.disposed) {
        t.listener.call(t.thisObject, s);
      }
    }
  }
};

function Pe(t) {
  return class e extends t {
    #m=new Ie;
    addEventListener(t, e, r) {
      return this.#m.addEventListener(t, e, r);
    }
    once(t) {
      return this.#m.once(t);
    }
    removeEventListener(t, e, r) {
      this.#m.removeEventListener(t, e, r);
    }
    hasEventListeners(t) {
      return this.#m.hasEventListeners(t);
    }
    dispatchEventToListeners(t, ...e) {
      this.#m.dispatchEventToListeners(t, ...e);
    }
  };
}

var Ee = {};

o(Ee, {
  RevealerDestination: () => We,
  RevealerRegistry: () => Be,
  registerRevealer: () => Ve,
  reveal: () => Me,
  revealDestination: () => Ge
});

import * as Le from "./../i18n/i18n.js";

var ke = {
  elementsPanel: "Elements panel",
  stylesSidebar: "styles sidebar",
  changesDrawer: "Changes drawer",
  issuesView: "Issues view",
  networkPanel: "Network panel",
  applicationPanel: "Application panel",
  sourcesPanel: "Sources panel",
  timelinePanel: "Performance panel",
  memoryInspectorPanel: "Memory inspector panel",
  developerResourcesPanel: "Developer Resources panel",
  animationsPanel: "Animations panel"
};

var Ce = Le.i18n.registerUIStrings("core/common/Revealer.ts", ke);

var Ne = Le.i18n.getLazilyComputedLocalizedString.bind(void 0, Ce);

var Oe;

var Be = class t {
  registeredRevealers=[];
  static instance() {
    if (Oe === void 0) {
      Oe = new t;
    }
    return Oe;
  }
  static removeInstance() {
    Oe = void 0;
  }
  register(t) {
    this.registeredRevealers.push(t);
  }
  async reveal(t, e) {
    const r = await Promise.all(this.getApplicableRegisteredRevealers(t).map((t => t.loadRevealer())));
    if (r.length < 1) {
      throw new Error(`No revealers found for ${t}`);
    }
    if (r.length > 1) {
      throw new Error(`Conflicting reveals found for ${t}`);
    }
    return await r[0].reveal(t, e);
  }
  getApplicableRegisteredRevealers(t) {
    return this.registeredRevealers.filter((e => {
      for (const r of e.contextTypes()) {
        if (t instanceof r) {
          return true;
        }
      }
      return false;
    }));
  }
};

function Ge(t) {
  const e = Be.instance().getApplicableRegisteredRevealers(t);
  for (const {destination: t} of e) {
    if (t) {
      return t();
    }
  }
  return null;
}

function Ve(t) {
  Be.instance().register(t);
}

async function Me(t, e = false) {
  await Be.instance().reveal(t, e);
}

var We = {
  DEVELOPER_RESOURCES_PANEL: Ne(ke.developerResourcesPanel),
  ELEMENTS_PANEL: Ne(ke.elementsPanel),
  STYLES_SIDEBAR: Ne(ke.stylesSidebar),
  CHANGES_DRAWER: Ne(ke.changesDrawer),
  ISSUES_VIEW: Ne(ke.issuesView),
  NETWORK_PANEL: Ne(ke.networkPanel),
  TIMELINE_PANEL: Ne(ke.timelinePanel),
  APPLICATION_PANEL: Ne(ke.applicationPanel),
  SOURCES_PANEL: Ne(ke.sourcesPanel),
  MEMORY_INSPECTOR_PANEL: Ne(ke.memoryInspectorPanel),
  ANIMATIONS_PANEL: Ne(ke.animationsPanel)
};

var De;

var Xe = class t extends Ie {
  #y;
  constructor() {
    super();
    this.#y = [];
  }
  static instance(e) {
    if (!De || e?.forceNew) {
      De = new t;
    }
    return De;
  }
  static removeInstance() {
    De = void 0;
  }
  addMessage(t, e = "info", r = false, s) {
    const n = new _e(t, e, Date.now(), r, s);
    this.#y.push(n);
    this.dispatchEventToListeners("messageAdded", n);
  }
  log(t) {
    this.addMessage(t, "info");
  }
  warn(t, e) {
    this.addMessage(t, "warning", void 0, e);
  }
  error(t, e = true) {
    this.addMessage(t, "error", e);
  }
  messages() {
    return this.#y;
  }
  show() {
    void this.showPromise();
  }
  showPromise() {
    return Me(this);
  }
};

var Fe = (t => {
  t["MESSAGE_ADDED"] = "messageAdded";
  return t;
})(Fe || {});

var Ue = (t => {
  t["INFO"] = "info";
  t["WARNING"] = "warning";
  t["ERROR"] = "error";
  return t;
})(Ue || {});

var je = (t => {
  t["CSS"] = "css";
  t["ConsoleAPI"] = "console-api";
  t["ISSUE_PANEL"] = "issue-panel";
  t["SELF_XSS"] = "self-xss";
  return t;
})(je || {});

var _e = class {
  text;
  level;
  timestamp;
  show;
  source;
  constructor(t, e, r, s, n) {
    this.text = t;
    this.level = e;
    this.timestamp = typeof r === "number" ? r : Date.now();
    this.show = s;
    if (n) {
      this.source = n;
    }
  }
};

var He = {};

o(He, {
  debounce: () => $e
});

var $e = function(t, e) {
  let r = 0;
  const s = () => {
    clearTimeout(r);
    r = window.setTimeout((() => t()), e);
  };
  return s;
};

var qe = {};

o(qe, {
  fireEvent: () => Ze,
  removeEventListeners: () => Ye
});

function Ye(t) {
  for (const e of t) {
    e.eventTarget.removeEventListener(e.eventType, e.listener, e.thisObject);
  }
  t.splice(0);
}

function Ze(t, e = {}, r = window) {
  const s = new CustomEvent(t, {
    bubbles: true,
    cancelable: true,
    detail: e
  });
  r.dispatchEvent(s);
}

var Ke = c(u());

var Je = {};

o(Je, {
  lazy: () => er
});

var Qe = Symbol("uninitialized");

var tr = Symbol("error");

function er(t) {
  let e = Qe;
  let r = null;
  return () => {
    if (e === tr) {
      throw r;
    } else if (e !== Qe) {
      return e;
    }
    try {
      e = t();
      return e;
    } catch (t) {
      r = t;
      e = tr;
      throw r;
    }
  };
}

var rr = {};

o(rr, {
  Linkifier: () => sr,
  getApplicableRegisteredlinkifiers: () => ar,
  registerLinkifier: () => ir
});

var sr = class {
  static async linkify(t, e) {
    if (!t) {
      throw new Error("Can't linkify " + t);
    }
    const r = ar(t)[0];
    if (!r) {
      throw new Error("No linkifiers registered for object " + t);
    }
    const s = await r.loadLinkifier();
    return s.linkify(t, e);
  }
};

var nr = [];

function ir(t) {
  nr.push(t);
}

function ar(t) {
  return nr.filter(e);
  function e(e) {
    if (!e.contextTypes) {
      return true;
    }
    for (const r of e.contextTypes()) {
      if (t instanceof r) {
        return true;
      }
    }
    return false;
  }
}

var or = {};

o(or, {
  Mutex: () => lr
});

var lr = class {
  #w=false;
  #b=[];
  acquire() {
    const t = {
      resolved: false
    };
    if (this.#w) {
      return new Promise((e => {
        this.#b.push((() => e(this.#S.bind(this, t))));
      }));
    }
    this.#w = true;
    return Promise.resolve(this.#S.bind(this, t));
  }
  #S(t) {
    if (t.resolved) {
      throw new Error("Cannot release more than once.");
    }
    t.resolved = true;
    const e = this.#b.shift();
    if (!e) {
      this.#w = false;
      return;
    }
    e();
  }
  async run(t) {
    const e = await this.acquire();
    try {
      const e = await t();
      return e;
    } finally {
      e();
    }
  }
};

var cr = {};

o(cr, {
  ParsedURL: () => dr,
  normalizePath: () => ur,
  schemeIs: () => gr
});

import * as hr from "./../platform/platform.js";

function ur(t) {
  if (t.indexOf("..") === -1 && t.indexOf(".") === -1) {
    return t;
  }
  const e = (t[0] === "/" ? t.substring(1) : t).split("/");
  const r = [];
  for (const t of e) {
    if (t === ".") {
      continue;
    } else if (t === "..") {
      r.pop();
    } else {
      r.push(t);
    }
  }
  let s = r.join("/");
  if (t[0] === "/" && s) {
    s = "/" + s;
  }
  if (s[s.length - 1] !== "/" && (t[t.length - 1] === "/" || e[e.length - 1] === "." || e[e.length - 1] === "..")) {
    s = s + "/";
  }
  return s;
}

function gr(t, e) {
  try {
    return new URL(t).protocol === e;
  } catch (t) {
    return false;
  }
}

var dr = class t {
  isValid;
  url;
  scheme;
  user;
  host;
  port;
  path;
  queryParams;
  fragment;
  folderPathComponents;
  lastPathComponent;
  blobInnerScheme;
  #v;
  #x;
  constructor(e) {
    this.isValid = false;
    this.url = e;
    this.scheme = "";
    this.user = "";
    this.host = "";
    this.port = "";
    this.path = "";
    this.queryParams = "";
    this.fragment = "";
    this.folderPathComponents = "";
    this.lastPathComponent = "";
    const r = this.url.startsWith("blob:");
    const s = r ? e.substring(5) : e;
    const n = s.match(t.urlRegex());
    if (n) {
      this.isValid = true;
      if (r) {
        this.blobInnerScheme = n[2].toLowerCase();
        this.scheme = "blob";
      } else {
        this.scheme = n[2].toLowerCase();
      }
      this.user = n[3] ?? "";
      this.host = n[4] ?? "";
      this.port = n[5] ?? "";
      this.path = n[6] ?? "/";
      this.queryParams = n[7] ?? "";
      this.fragment = n[8] ?? "";
    } else {
      if (this.url.startsWith("data:")) {
        this.scheme = "data";
        return;
      }
      if (this.url.startsWith("blob:")) {
        this.scheme = "blob";
        return;
      }
      if (this.url === "about:blank") {
        this.scheme = "about";
        return;
      }
      this.path = this.url;
    }
    const i = this.path.lastIndexOf("/", this.path.length - 2);
    if (i !== -1) {
      this.lastPathComponent = this.path.substring(i + 1);
    } else {
      this.lastPathComponent = this.path;
    }
    const a = this.path.lastIndexOf("/");
    if (a !== -1) {
      this.folderPathComponents = this.path.substring(0, a);
    }
  }
  static fromString(e) {
    const r = new t(e.toString());
    if (r.isValid) {
      return r;
    }
    return null;
  }
  static preEncodeSpecialCharactersInPath(t) {
    for (const e of [ "%", ";", "#", "?", " " ]) {
      t = t.replaceAll(e, encodeURIComponent(e));
    }
    return t;
  }
  static rawPathToEncodedPathString(e) {
    const r = t.preEncodeSpecialCharactersInPath(e);
    if (e.startsWith("/")) {
      return new URL(r, "file:///").pathname;
    }
    return new URL("/" + r, "file:///").pathname.substr(1);
  }
  static encodedFromParentPathAndName(e, r) {
    return t.concatenate(e, "/", t.preEncodeSpecialCharactersInPath(r));
  }
  static urlFromParentUrlAndName(e, r) {
    return t.concatenate(e, "/", t.preEncodeSpecialCharactersInPath(r));
  }
  static encodedPathToRawPathString(t) {
    return decodeURIComponent(t);
  }
  static rawPathToUrlString(e) {
    let r = t.preEncodeSpecialCharactersInPath(e.replace(/\\/g, "/"));
    r = r.replace(/\\/g, "/");
    if (!r.startsWith("file://")) {
      if (r.startsWith("/")) {
        r = "file://" + r;
      } else {
        r = "file:///" + r;
      }
    }
    return new URL(r).toString();
  }
  static relativePathToUrlString(e, r) {
    const s = t.preEncodeSpecialCharactersInPath(e.replace(/\\/g, "/"));
    return new URL(s, r).toString();
  }
  static urlToRawPathString(t, e) {
    console.assert(t.startsWith("file://"), "This must be a file URL.");
    const r = decodeURIComponent(t);
    if (e) {
      return r.substr("file:///".length).replace(/\//g, "\\");
    }
    return r.substr("file://".length);
  }
  static sliceUrlToEncodedPathString(t, e) {
    return t.substring(e);
  }
  static substr(t, e, r) {
    return t.substr(e, r);
  }
  static substring(t, e, r) {
    return t.substring(e, r);
  }
  static prepend(t, e) {
    return t + e;
  }
  static concatenate(t, ...e) {
    return t.concat(...e);
  }
  static trim(t) {
    return t.trim();
  }
  static slice(t, e, r) {
    return t.slice(e, r);
  }
  static join(t, e) {
    return t.join(e);
  }
  static split(t, e, r) {
    return t.split(e, r);
  }
  static toLowerCase(t) {
    return t.toLowerCase();
  }
  static isValidUrlString(e) {
    return new t(e).isValid;
  }
  static urlWithoutHash(t) {
    const e = t.indexOf("#");
    if (e !== -1) {
      return t.substr(0, e);
    }
    return t;
  }
  static urlRegex() {
    if (t.urlRegexInstance) {
      return t.urlRegexInstance;
    }
    const e = /([A-Za-z][A-Za-z0-9+.-]*):\/\//;
    const r = /(?:([A-Za-z0-9\-._~%!$&'()*+,;=:]*)@)?/;
    const s = /((?:\[::\d?\])|(?:[^\s\/:]*))/;
    const n = /(?::([\d]+))?/;
    const i = /(\/[^#?]*)?/;
    const a = /(?:\?([^#]*))?/;
    const o = /(?:#(.*))?/;
    t.urlRegexInstance = new RegExp("^(" + e.source + r.source + s.source + n.source + ")" + i.source + a.source + o.source + "$");
    return t.urlRegexInstance;
  }
  static extractPath(t) {
    const e = this.fromString(t);
    return e ? e.path : "";
  }
  static extractOrigin(t) {
    const e = this.fromString(t);
    return e ? e.securityOrigin() : hr.DevToolsPath.EmptyUrlString;
  }
  static extractExtension(e) {
    e = t.urlWithoutHash(e);
    const r = e.indexOf("?");
    if (r !== -1) {
      e = e.substr(0, r);
    }
    const s = e.lastIndexOf("/");
    if (s !== -1) {
      e = e.substr(s + 1);
    }
    const n = e.lastIndexOf(".");
    if (n !== -1) {
      e = e.substr(n + 1);
      const t = e.indexOf("%");
      if (t !== -1) {
        return e.substr(0, t);
      }
      return e;
    }
    return "";
  }
  static extractName(t) {
    let e = t.lastIndexOf("/");
    const r = e !== -1 ? t.substr(e + 1) : t;
    e = r.indexOf("?");
    return e < 0 ? r : r.substr(0, e);
  }
  static completeURL(t, e) {
    const r = e.trim();
    if (r.startsWith("data:") || r.startsWith("blob:") || r.startsWith("javascript:") || r.startsWith("mailto:")) {
      return e;
    }
    const s = this.fromString(r);
    if (s && s.scheme) {
      const t = s.securityOrigin();
      const e = ur(s.path);
      const r = s.queryParams && `?${s.queryParams}`;
      const n = s.fragment && `#${s.fragment}`;
      return t + e + r + n;
    }
    const n = this.fromString(t);
    if (!n) {
      return null;
    }
    if (n.isDataURL()) {
      return e;
    }
    if (e.length > 1 && e.charAt(0) === "/" && e.charAt(1) === "/") {
      return n.scheme + ":" + e;
    }
    const i = n.securityOrigin();
    const a = n.path;
    const o = n.queryParams ? "?" + n.queryParams : "";
    if (!e.length) {
      return i + a + o;
    }
    if (e.charAt(0) === "#") {
      return i + a + o + e;
    }
    if (e.charAt(0) === "?") {
      return i + a + e;
    }
    const l = e.match(/^[^#?]*/);
    if (!l || !e.length) {
      throw new Error("Invalid href");
    }
    let c = l[0];
    const h = e.substring(c.length);
    if (c.charAt(0) !== "/") {
      c = n.folderPathComponents + "/" + c;
    }
    return i + ur(c) + h;
  }
  static splitLineAndColumn(e) {
    const r = e.match(t.urlRegex());
    let s = "";
    let n = e;
    if (r) {
      s = r[1];
      n = e.substring(r[1].length);
    }
    const i = /(?::(\d+))?(?::(\d+))?$/;
    const a = i.exec(n);
    let o;
    let l;
    console.assert(Boolean(a));
    if (!a) {
      return {
        url: e,
        lineNumber: 0,
        columnNumber: 0
      };
    }
    if (typeof a[1] === "string") {
      o = parseInt(a[1], 10);
      o = isNaN(o) ? void 0 : o - 1;
    }
    if (typeof a[2] === "string") {
      l = parseInt(a[2], 10);
      l = isNaN(l) ? void 0 : l - 1;
    }
    let c = s + n.substring(0, n.length - a[0].length);
    if (a[1] === void 0 && a[2] === void 0) {
      const e = /wasm-function\[\d+\]:0x([a-z0-9]+)$/g;
      const r = e.exec(n);
      if (r && typeof r[1] === "string") {
        c = t.removeWasmFunctionInfoFromURL(c);
        l = parseInt(r[1], 16);
        l = isNaN(l) ? void 0 : l;
      }
    }
    return {
      url: c,
      lineNumber: o,
      columnNumber: l
    };
  }
  static removeWasmFunctionInfoFromURL(e) {
    const r = /:wasm-function\[\d+\]/;
    const s = e.search(r);
    if (s === -1) {
      return e;
    }
    return t.substring(e, 0, s);
  }
  static beginsWithWindowsDriveLetter(t) {
    return /^[A-Za-z]:/.test(t);
  }
  static beginsWithScheme(t) {
    return /^[A-Za-z][A-Za-z0-9+.-]*:/.test(t);
  }
  static isRelativeURL(t) {
    return !this.beginsWithScheme(t) || this.beginsWithWindowsDriveLetter(t);
  }
  get displayName() {
    if (this.#v) {
      return this.#v;
    }
    if (this.isDataURL()) {
      return this.dataURLDisplayName();
    }
    if (this.isBlobURL()) {
      return this.url;
    }
    if (this.isAboutBlank()) {
      return this.url;
    }
    this.#v = this.lastPathComponent;
    if (!this.#v) {
      this.#v = (this.host || "") + "/";
    }
    if (this.#v === "/") {
      this.#v = this.url;
    }
    return this.#v;
  }
  dataURLDisplayName() {
    if (this.#x) {
      return this.#x;
    }
    if (!this.isDataURL()) {
      return "";
    }
    this.#x = hr.StringUtilities.trimEndWithMaxLength(this.url, 20);
    return this.#x;
  }
  isAboutBlank() {
    return this.url === "about:blank";
  }
  isDataURL() {
    return this.scheme === "data";
  }
  isHttpOrHttps() {
    return this.scheme === "http" || this.scheme === "https";
  }
  isBlobURL() {
    return this.url.startsWith("blob:");
  }
  lastPathComponentWithFragment() {
    return this.lastPathComponent + (this.fragment ? "#" + this.fragment : "");
  }
  domain() {
    if (this.isDataURL()) {
      return "data:";
    }
    return this.host + (this.port ? ":" + this.port : "");
  }
  securityOrigin() {
    if (this.isDataURL()) {
      return "data:";
    }
    const t = this.isBlobURL() ? this.blobInnerScheme : this.scheme;
    return t + "://" + this.domain();
  }
  urlWithoutScheme() {
    if (this.scheme && this.url.startsWith(this.scheme + "://")) {
      return this.url.substring(this.scheme.length + 3);
    }
    return this.url;
  }
  static urlRegexInstance=null;
};

var pr = {};

o(pr, {
  CompositeProgress: () => mr,
  Progress: () => fr,
  ProgressProxy: () => wr,
  SubProgress: () => yr
});

var fr = class {
  setTotalWork(t) {}
  setTitle(t) {}
  setWorked(t, e) {}
  incrementWorked(t) {}
  done() {}
  isCanceled() {
    return false;
  }
};

var mr = class {
  parent;
  #R;
  #T;
  constructor(t) {
    this.parent = t;
    this.#R = [];
    this.#T = 0;
    this.parent.setTotalWork(1);
    this.parent.setWorked(0);
  }
  childDone() {
    if (++this.#T !== this.#R.length) {
      return;
    }
    this.parent.done();
  }
  createSubProgress(t) {
    const e = new yr(this, t);
    this.#R.push(e);
    return e;
  }
  update() {
    let t = 0;
    let e = 0;
    for (let r = 0; r < this.#R.length; ++r) {
      const s = this.#R[r];
      if (s.getTotalWork()) {
        e += s.getWeight() * s.getWorked() / s.getTotalWork();
      }
      t += s.getWeight();
    }
    this.parent.setWorked(e / t);
  }
};

var yr = class {
  #z;
  #A;
  #I;
  #P;
  constructor(t, e) {
    this.#z = t;
    this.#A = e || 1;
    this.#I = 0;
    this.#P = 0;
  }
  isCanceled() {
    return this.#z.parent.isCanceled();
  }
  setTitle(t) {
    this.#z.parent.setTitle(t);
  }
  done() {
    this.setWorked(this.#P);
    this.#z.childDone();
  }
  setTotalWork(t) {
    this.#P = t;
    this.#z.update();
  }
  setWorked(t, e) {
    this.#I = t;
    if (typeof e !== "undefined") {
      this.setTitle(e);
    }
    this.#z.update();
  }
  incrementWorked(t) {
    this.setWorked(this.#I + (t || 1));
  }
  getWeight() {
    return this.#A;
  }
  getWorked() {
    return this.#I;
  }
  getTotalWork() {
    return this.#P;
  }
};

var wr = class {
  #E;
  #L;
  constructor(t, e) {
    this.#E = t;
    this.#L = e;
  }
  isCanceled() {
    return this.#E ? this.#E.isCanceled() : false;
  }
  setTitle(t) {
    if (this.#E) {
      this.#E.setTitle(t);
    }
  }
  done() {
    if (this.#E) {
      this.#E.done();
    }
    if (this.#L) {
      this.#L();
    }
  }
  setTotalWork(t) {
    if (this.#E) {
      this.#E.setTotalWork(t);
    }
  }
  setWorked(t, e) {
    if (this.#E) {
      this.#E.setWorked(t, e);
    }
  }
  incrementWorked(t) {
    if (this.#E) {
      this.#E.incrementWorked(t);
    }
  }
};

var br = c(g());

var Sr = {};

o(Sr, {
  ResolverBase: () => vr
});

var vr = class {
  #k=new Map;
  async waitFor(t) {
    const e = this.getForId(t);
    if (!e) {
      return this.getOrCreatePromise(t);
    }
    return e;
  }
  tryGet(t, e) {
    const r = this.getForId(t);
    if (!r) {
      const r = () => {};
      void this.getOrCreatePromise(t).catch(r).then((t => {
        if (t) {
          e(t);
        }
      }));
      return null;
    }
    return r;
  }
  clear() {
    this.stopListening();
    for (const [t, {reject: e}] of this.#k.entries()) {
      e(new Error(`Object with ${t} never resolved.`));
    }
    this.#k.clear();
  }
  getOrCreatePromise(t) {
    const e = this.#k.get(t);
    if (e) {
      return e.promise;
    }
    let r = () => {};
    let s = () => {};
    const n = new Promise(((t, e) => {
      r = t;
      s = e;
    }));
    this.#k.set(t, {
      promise: n,
      resolve: r,
      reject: s
    });
    this.startListening();
    return n;
  }
  onResolve(t, e) {
    const r = this.#k.get(t);
    this.#k.delete(t);
    if (this.#k.size === 0) {
      this.stopListening();
    }
    r?.resolve(e);
  }
};

var xr = {};

o(xr, {
  ResourceCategory: () => Pr,
  ResourceType: () => Ir,
  mimeTypeByExtension: () => Nr,
  resourceCategories: () => Er,
  resourceTypeByExtension: () => Cr,
  resourceTypes: () => Lr
});

import * as Rr from "./../i18n/i18n.js";

var Tr = {
  fetchAndXHR: "`Fetch` and `XHR`",
  javascript: "JavaScript",
  js: "JS",
  css: "CSS",
  img: "Img",
  media: "Media",
  font: "Font",
  doc: "Doc",
  ws: "WS",
  webassembly: "WebAssembly",
  wasm: "Wasm",
  manifest: "Manifest",
  other: "Other",
  document: "Document",
  stylesheet: "Stylesheet",
  image: "Image",
  script: "Script",
  texttrack: "TextTrack",
  fetch: "Fetch",
  eventsource: "EventSource",
  websocket: "WebSocket",
  webtransport: "WebTransport",
  signedexchange: "SignedExchange",
  ping: "Ping",
  cspviolationreport: "CSPViolationReport",
  preflight: "Preflight",
  webbundle: "WebBundle"
};

var zr = Rr.i18n.registerUIStrings("core/common/ResourceType.ts", Tr);

var Ar = Rr.i18n.getLazilyComputedLocalizedString.bind(void 0, zr);

var Ir = class {
  #C;
  #N;
  #O;
  #B;
  constructor(t, e, r, s) {
    this.#C = t;
    this.#N = e;
    this.#O = r;
    this.#B = s;
  }
  static fromMimeType(t) {
    if (!t) {
      return Lr.Other;
    }
    if (t.startsWith("text/html")) {
      return Lr.Document;
    }
    if (t.startsWith("text/css")) {
      return Lr.Stylesheet;
    }
    if (t.startsWith("image/")) {
      return Lr.Image;
    }
    if (t.startsWith("text/")) {
      return Lr.Script;
    }
    if (t.includes("font")) {
      return Lr.Font;
    }
    if (t.includes("script")) {
      return Lr.Script;
    }
    if (t.includes("octet")) {
      return Lr.Other;
    }
    if (t.includes("application")) {
      return Lr.Script;
    }
    return Lr.Other;
  }
  static fromMimeTypeOverride(t) {
    if (t === "application/manifest+json") {
      return Lr.Manifest;
    }
    if (t === "application/wasm") {
      return Lr.Wasm;
    }
    if (t === "application/webbundle") {
      return Lr.WebBundle;
    }
    return null;
  }
  static fromURL(t) {
    return Cr.get(dr.extractExtension(t)) || null;
  }
  static fromName(t) {
    for (const e in Lr) {
      const r = Lr[e];
      if (r.name() === t) {
        return r;
      }
    }
    return null;
  }
  static mimeFromURL(t) {
    if (t.startsWith("snippet://") || t.startsWith("debugger://")) {
      return "text/javascript";
    }
    const e = dr.extractName(t);
    if (kr.has(e)) {
      return kr.get(e);
    }
    let r = dr.extractExtension(t).toLowerCase();
    if (r === "html" && e.endsWith(".component.html")) {
      r = "component.html";
    }
    return Nr.get(r);
  }
  static mimeFromExtension(t) {
    return Nr.get(t);
  }
  static simplifyContentType(t) {
    const e = new RegExp("^application(.*json$|/json+.*)");
    return e.test(t) ? "application/json" : t;
  }
  static mediaTypeForMetrics(t, e, r, s, n) {
    if (t !== "text/javascript") {
      return t;
    }
    if (e) {
      return "text/javascript+sourcemapped";
    }
    if (r) {
      return "text/javascript+minified";
    }
    if (s) {
      return "text/javascript+snippet";
    }
    if (n) {
      return "text/javascript+eval";
    }
    return "text/javascript+plain";
  }
  name() {
    return this.#C;
  }
  title() {
    return this.#N();
  }
  category() {
    return this.#O;
  }
  isTextType() {
    return this.#B;
  }
  isScript() {
    return this.#C === "script" || this.#C === "sm-script";
  }
  hasScripts() {
    return this.isScript() || this.isDocument();
  }
  isStyleSheet() {
    return this.#C === "stylesheet" || this.#C === "sm-stylesheet";
  }
  hasStyleSheets() {
    return this.isStyleSheet() || this.isDocument();
  }
  isDocument() {
    return this.#C === "document";
  }
  isDocumentOrScriptOrStyleSheet() {
    return this.isDocument() || this.isScript() || this.isStyleSheet();
  }
  isFont() {
    return this.#C === "font";
  }
  isImage() {
    return this.#C === "image";
  }
  isFromSourceMap() {
    return this.#C.startsWith("sm-");
  }
  isWebbundle() {
    return this.#C === "webbundle";
  }
  toString() {
    return this.#C;
  }
  canonicalMimeType() {
    if (this.isDocument()) {
      return "text/html";
    }
    if (this.isScript()) {
      return "text/javascript";
    }
    if (this.isStyleSheet()) {
      return "text/css";
    }
    return "";
  }
};

var Pr = class {
  name;
  title;
  shortTitle;
  constructor(t, e, r) {
    this.name = t;
    this.title = e;
    this.shortTitle = r;
  }
  static categoryByTitle(t) {
    const e = Object.values(Er);
    return e.find((e => e.title() === t)) || null;
  }
};

var Er = {
  XHR: new Pr("Fetch and XHR", Ar(Tr.fetchAndXHR), Rr.i18n.lockedLazyString("Fetch/XHR")),
  Document: new Pr(Tr.document, Ar(Tr.document), Ar(Tr.doc)),
  Stylesheet: new Pr(Tr.css, Ar(Tr.css), Ar(Tr.css)),
  Script: new Pr(Tr.javascript, Ar(Tr.javascript), Ar(Tr.js)),
  Font: new Pr(Tr.font, Ar(Tr.font), Ar(Tr.font)),
  Image: new Pr(Tr.image, Ar(Tr.image), Ar(Tr.img)),
  Media: new Pr(Tr.media, Ar(Tr.media), Ar(Tr.media)),
  Manifest: new Pr(Tr.manifest, Ar(Tr.manifest), Ar(Tr.manifest)),
  WebSocket: new Pr(Tr.websocket, Ar(Tr.websocket), Ar(Tr.ws)),
  Wasm: new Pr(Tr.webassembly, Ar(Tr.webassembly), Ar(Tr.wasm)),
  Other: new Pr(Tr.other, Ar(Tr.other), Ar(Tr.other))
};

var Lr = {
  Document: new Ir("document", Ar(Tr.document), Er.Document, true),
  Stylesheet: new Ir("stylesheet", Ar(Tr.stylesheet), Er.Stylesheet, true),
  Image: new Ir("image", Ar(Tr.image), Er.Image, false),
  Media: new Ir("media", Ar(Tr.media), Er.Media, false),
  Font: new Ir("font", Ar(Tr.font), Er.Font, false),
  Script: new Ir("script", Ar(Tr.script), Er.Script, true),
  TextTrack: new Ir("texttrack", Ar(Tr.texttrack), Er.Other, true),
  XHR: new Ir("xhr", Rr.i18n.lockedLazyString("XHR"), Er.XHR, true),
  Fetch: new Ir("fetch", Ar(Tr.fetch), Er.XHR, true),
  Prefetch: new Ir("prefetch", Rr.i18n.lockedLazyString("Prefetch"), Er.Document, true),
  EventSource: new Ir("eventsource", Ar(Tr.eventsource), Er.XHR, true),
  WebSocket: new Ir("websocket", Ar(Tr.websocket), Er.WebSocket, false),
  WebTransport: new Ir("webtransport", Ar(Tr.webtransport), Er.WebSocket, false),
  Wasm: new Ir("wasm", Ar(Tr.wasm), Er.Wasm, false),
  Manifest: new Ir("manifest", Ar(Tr.manifest), Er.Manifest, true),
  SignedExchange: new Ir("signed-exchange", Ar(Tr.signedexchange), Er.Other, false),
  Ping: new Ir("ping", Ar(Tr.ping), Er.Other, false),
  CSPViolationReport: new Ir("csp-violation-report", Ar(Tr.cspviolationreport), Er.Other, false),
  Other: new Ir("other", Ar(Tr.other), Er.Other, false),
  Preflight: new Ir("preflight", Ar(Tr.preflight), Er.Other, true),
  SourceMapScript: new Ir("sm-script", Ar(Tr.script), Er.Script, true),
  SourceMapStyleSheet: new Ir("sm-stylesheet", Ar(Tr.stylesheet), Er.Stylesheet, true),
  WebBundle: new Ir("webbundle", Ar(Tr.webbundle), Er.Other, false)
};

var kr = new Map([ [ "Cakefile", "text/x-coffeescript" ] ]);

var Cr = new Map([ [ "js", Lr.Script ], [ "mjs", Lr.Script ], [ "css", Lr.Stylesheet ], [ "xsl", Lr.Stylesheet ], [ "avif", Lr.Image ], [ "bmp", Lr.Image ], [ "gif", Lr.Image ], [ "ico", Lr.Image ], [ "jpeg", Lr.Image ], [ "jpg", Lr.Image ], [ "jxl", Lr.Image ], [ "png", Lr.Image ], [ "svg", Lr.Image ], [ "tif", Lr.Image ], [ "tiff", Lr.Image ], [ "vue", Lr.Document ], [ "webmanifest", Lr.Manifest ], [ "webp", Lr.Media ], [ "otf", Lr.Font ], [ "ttc", Lr.Font ], [ "ttf", Lr.Font ], [ "woff", Lr.Font ], [ "woff2", Lr.Font ], [ "wasm", Lr.Wasm ] ]);

var Nr = new Map([ [ "js", "text/javascript" ], [ "mjs", "text/javascript" ], [ "css", "text/css" ], [ "html", "text/html" ], [ "htm", "text/html" ], [ "xml", "application/xml" ], [ "xsl", "application/xml" ], [ "wasm", "application/wasm" ], [ "webmanifest", "application/manifest+json" ], [ "asp", "application/x-aspx" ], [ "aspx", "application/x-aspx" ], [ "jsp", "application/x-jsp" ], [ "c", "text/x-c++src" ], [ "cc", "text/x-c++src" ], [ "cpp", "text/x-c++src" ], [ "h", "text/x-c++src" ], [ "m", "text/x-c++src" ], [ "mm", "text/x-c++src" ], [ "coffee", "text/x-coffeescript" ], [ "dart", "application/vnd.dart" ], [ "ts", "text/typescript" ], [ "tsx", "text/typescript-jsx" ], [ "json", "application/json" ], [ "gyp", "application/json" ], [ "gypi", "application/json" ], [ "map", "application/json" ], [ "cs", "text/x-csharp" ], [ "go", "text/x-go" ], [ "java", "text/x-java" ], [ "kt", "text/x-kotlin" ], [ "scala", "text/x-scala" ], [ "less", "text/x-less" ], [ "php", "application/x-httpd-php" ], [ "phtml", "application/x-httpd-php" ], [ "py", "text/x-python" ], [ "sh", "text/x-sh" ], [ "gss", "text/x-gss" ], [ "sass", "text/x-sass" ], [ "scss", "text/x-scss" ], [ "vtt", "text/vtt" ], [ "ls", "text/x-livescript" ], [ "md", "text/markdown" ], [ "cljs", "text/x-clojure" ], [ "cljc", "text/x-clojure" ], [ "cljx", "text/x-clojure" ], [ "styl", "text/x-styl" ], [ "jsx", "text/jsx" ], [ "avif", "image/avif" ], [ "bmp", "image/bmp" ], [ "gif", "image/gif" ], [ "ico", "image/ico" ], [ "jpeg", "image/jpeg" ], [ "jpg", "image/jpeg" ], [ "jxl", "image/jxl" ], [ "png", "image/png" ], [ "svg", "image/svg+xml" ], [ "tif", "image/tif" ], [ "tiff", "image/tiff" ], [ "webp", "image/webp" ], [ "otf", "font/otf" ], [ "ttc", "font/collection" ], [ "ttf", "font/ttf" ], [ "woff", "font/woff" ], [ "woff2", "font/woff2" ], [ "component.html", "text/x.angular" ], [ "svelte", "text/x.svelte" ], [ "vue", "text/x.vue" ] ]);

var Or = {};

o(Or, {
  earlyInitializationRunnables: () => Xr,
  lateInitializationRunnables: () => Mr,
  maybeRemoveLateInitializationRunnable: () => Vr,
  registerEarlyInitializationRunnable: () => Dr,
  registerLateInitializationRunnable: () => Gr
});

var Br = new Map;

function Gr(t) {
  const {id: e, loadRunnable: r} = t;
  if (Br.has(e)) {
    throw new Error(`Duplicate late Initializable runnable id '${e}'`);
  }
  Br.set(e, r);
}

function Vr(t) {
  return Br.delete(t);
}

function Mr() {
  return [ ...Br.values() ];
}

var Wr = [];

function Dr(t) {
  Wr.push(t);
}

function Xr() {
  return Wr;
}

var Fr = {};

o(Fr, {
  Segment: () => jr,
  SegmentedRange: () => _r
});

import * as Ur from "./../platform/platform.js";

var jr = class {
  begin;
  end;
  data;
  constructor(t, e, r) {
    if (t > e) {
      throw new Error("Invalid segment");
    }
    this.begin = t;
    this.end = e;
    this.data = r;
  }
  intersects(t) {
    return this.begin < t.end && t.begin < this.end;
  }
};

var _r = class {
  #G;
  #V;
  constructor(t) {
    this.#G = [];
    this.#V = t;
  }
  append(t) {
    let e = Ur.ArrayUtilities.lowerBound(this.#G, t, ((t, e) => t.begin - e.begin));
    let r = e;
    let s = null;
    if (e > 0) {
      const r = this.#G[e - 1];
      s = this.tryMerge(r, t);
      if (s) {
        --e;
        t = s;
      } else if (this.#G[e - 1].end >= t.begin) {
        if (t.end < r.end) {
          this.#G.splice(e, 0, new jr(t.end, r.end, r.data));
        }
        r.end = t.begin;
      }
    }
    while (r < this.#G.length && this.#G[r].end <= t.end) {
      ++r;
    }
    if (r < this.#G.length) {
      s = this.tryMerge(t, this.#G[r]);
      if (s) {
        r++;
        t = s;
      } else if (t.intersects(this.#G[r])) {
        this.#G[r].begin = t.end;
      }
    }
    this.#G.splice(e, r - e, t);
  }
  appendRange(t) {
    t.segments().forEach((t => this.append(t)));
  }
  segments() {
    return this.#G;
  }
  tryMerge(t, e) {
    const r = this.#V && this.#V(t, e);
    if (!r) {
      return null;
    }
    r.begin = t.begin;
    r.end = Math.max(t.end, e.end);
    return r;
  }
};

var Hr = {};

o(Hr, {
  SettingCategory: () => is,
  SettingType: () => os,
  getLocalizedSettingsCategory: () => as,
  getRegisteredSettings: () => es,
  maybeRemoveSettingExtension: () => ns,
  registerSettingExtension: () => ts,
  registerSettingsForTest: () => rs,
  resetSettings: () => ss
});

import * as $r from "./../i18n/i18n.js";

import * as qr from "./../root/root.js";

var Yr = {
  elements: "Elements",
  appearance: "Appearance",
  sources: "Sources",
  network: "Network",
  performance: "Performance",
  console: "Console",
  persistence: "Persistence",
  debugger: "Debugger",
  global: "Global",
  rendering: "Rendering",
  grid: "Grid",
  mobile: "Mobile",
  memory: "Memory",
  extension: "Extension",
  adorner: "Adorner",
  sync: "Sync",
  privacy: "Privacy"
};

var Zr = $r.i18n.registerUIStrings("core/common/SettingRegistration.ts", Yr);

var Kr = $r.i18n.getLocalizedString.bind(void 0, Zr);

var Jr = [];

var Qr = new Set;

function ts(t) {
  const e = t.settingName;
  if (Qr.has(e)) {
    throw new Error(`Duplicate setting name '${e}'`);
  }
  Qr.add(e);
  Jr.push(t);
}

function es(t) {
  return Jr.filter((e => qr.Runtime.Runtime.isDescriptorEnabled({
    experiment: e.experiment,
    condition: e.condition
  }, t)));
}

function rs(t, e = false) {
  if (Jr.length === 0 || e) {
    Jr = t;
    Qr.clear();
    for (const e of t) {
      const t = e.settingName;
      if (Qr.has(t)) {
        throw new Error(`Duplicate setting name '${t}'`);
      }
      Qr.add(t);
    }
  }
}

function ss() {
  Jr = [];
  Qr.clear();
}

function ns(t) {
  const e = Jr.findIndex((e => e.settingName === t));
  if (e < 0 || !Qr.delete(t)) {
    return false;
  }
  Jr.splice(e, 1);
  return true;
}

var is = (t => {
  t["NONE"] = "";
  t["ELEMENTS"] = "ELEMENTS";
  t["APPEARANCE"] = "APPEARANCE";
  t["SOURCES"] = "SOURCES";
  t["NETWORK"] = "NETWORK";
  t["PERFORMANCE"] = "PERFORMANCE";
  t["CONSOLE"] = "CONSOLE";
  t["PERSISTENCE"] = "PERSISTENCE";
  t["DEBUGGER"] = "DEBUGGER";
  t["GLOBAL"] = "GLOBAL";
  t["RENDERING"] = "RENDERING";
  t["GRID"] = "GRID";
  t["MOBILE"] = "MOBILE";
  t["EMULATION"] = "EMULATION";
  t["MEMORY"] = "MEMORY";
  t["EXTENSIONS"] = "EXTENSIONS";
  t["ADORNER"] = "ADORNER";
  t["SYNC"] = "SYNC";
  t["PRIVACY"] = "PRIVACY";
  return t;
})(is || {});

function as(t) {
  switch (t) {
   case "ELEMENTS":
    return Kr(Yr.elements);

   case "APPEARANCE":
    return Kr(Yr.appearance);

   case "SOURCES":
    return Kr(Yr.sources);

   case "NETWORK":
    return Kr(Yr.network);

   case "PERFORMANCE":
    return Kr(Yr.performance);

   case "CONSOLE":
    return Kr(Yr.console);

   case "PERSISTENCE":
    return Kr(Yr.persistence);

   case "DEBUGGER":
    return Kr(Yr.debugger);

   case "GLOBAL":
    return Kr(Yr.global);

   case "RENDERING":
    return Kr(Yr.rendering);

   case "GRID":
    return Kr(Yr.grid);

   case "MOBILE":
    return Kr(Yr.mobile);

   case "EMULATION":
    return Kr(Yr.console);

   case "MEMORY":
    return Kr(Yr.memory);

   case "EXTENSIONS":
    return Kr(Yr.extension);

   case "ADORNER":
    return Kr(Yr.adorner);

   case "":
    return $r.i18n.lockedString("");

   case "SYNC":
    return Kr(Yr.sync);

   case "PRIVACY":
    return Kr(Yr.privacy);
  }
}

var os = (t => {
  t["ARRAY"] = "array";
  t["REGEX"] = "regex";
  t["ENUM"] = "enum";
  t["BOOLEAN"] = "boolean";
  return t;
})(os || {});

var ls = {};

o(ls, {
  Deprecation: () => ms,
  NOOP_STORAGE: () => ds,
  RegExpSetting: () => ws,
  Setting: () => ys,
  SettingCategory: () => is,
  SettingStorageType: () => Ss,
  SettingType: () => os,
  Settings: () => gs,
  SettingsStorage: () => ps,
  VersionController: () => bs,
  getLocalizedSettingsCategory: () => as,
  maybeRemoveSettingExtension: () => ns,
  moduleSetting: () => vs,
  registerSettingExtension: () => ts,
  registerSettingsForTest: () => rs,
  resetSettings: () => ss,
  settingForTest: () => xs
});

import * as cs from "./../platform/platform.js";

import * as hs from "./../root/root.js";

var us;

var gs = class t {
  constructor(t, e, r, s) {
    this.syncedStorage = t;
    this.globalStorage = e;
    this.localStorage = r;
    this.#M = new ps({});
    this.settingNameSet = new Set;
    this.orderValuesBySettingCategory = new Map;
    this.#W = new Ie;
    this.#D = new Map;
    this.moduleSettings = new Map;
    this.#X = s || {};
    for (const t of this.getRegisteredSettings()) {
      const {settingName: e, defaultValue: r, storageType: s} = t;
      const n = t.settingType === os.REGEX;
      const i = typeof r === "function" ? r(this.#X) : r;
      const a = n && typeof i === "string" ? this.createRegExpSetting(e, i, void 0, s) : this.createSetting(e, i, s);
      a.setTitleFunction(t.title);
      if (t.userActionCondition) {
        a.setRequiresUserAction(Boolean(hs.Runtime.Runtime.queryParam(t.userActionCondition)));
      }
      a.setRegistration(t);
      this.registerModuleSetting(a);
    }
  }
  #M;
  settingNameSet;
  orderValuesBySettingCategory;
  #W;
  #D;
  moduleSettings;
  #X;
  getRegisteredSettings() {
    return es(this.#X);
  }
  static hasInstance() {
    return typeof us !== "undefined";
  }
  static instance(e = {
    forceNew: null,
    syncedStorage: null,
    globalStorage: null,
    localStorage: null
  }) {
    const {forceNew: r, syncedStorage: s, globalStorage: n, localStorage: i, config: a} = e;
    if (!us || r) {
      if (!s || !n || !i) {
        throw new Error(`Unable to create settings: global and local storage must be provided: ${(new Error).stack}`);
      }
      us = new t(s, n, i, a);
    }
    return us;
  }
  static removeInstance() {
    us = void 0;
  }
  getHostConfig() {
    return this.#X;
  }
  setHostConfig(t) {
    this.#X = t;
  }
  registerModuleSetting(t) {
    const e = t.name;
    const r = t.category();
    const s = t.order();
    if (this.settingNameSet.has(e)) {
      throw new Error(`Duplicate Setting name '${e}'`);
    }
    if (r && s) {
      const t = this.orderValuesBySettingCategory.get(r) || new Set;
      if (t.has(s)) {
        throw new Error(`Duplicate order value '${s}' for settings category '${r}'`);
      }
      t.add(s);
      this.orderValuesBySettingCategory.set(r, t);
    }
    this.settingNameSet.add(e);
    this.moduleSettings.set(t.name, t);
  }
  static normalizeSettingName(t) {
    if ([ bs.GLOBAL_VERSION_SETTING_NAME, bs.SYNCED_VERSION_SETTING_NAME, bs.LOCAL_VERSION_SETTING_NAME, "currentDockState", "isUnderTest" ].includes(t)) {
      return t;
    }
    return cs.StringUtilities.toKebabCase(t);
  }
  moduleSetting(t) {
    const e = this.moduleSettings.get(t);
    if (!e) {
      throw new Error("No setting registered: " + t);
    }
    return e;
  }
  settingForTest(t) {
    const e = this.#D.get(t);
    if (!e) {
      throw new Error("No setting registered: " + t);
    }
    return e;
  }
  createSetting(t, e, r) {
    const s = this.storageFromType(r);
    let n = this.#D.get(t);
    if (!n) {
      n = new ys(t, e, this.#W, s);
      this.#D.set(t, n);
    }
    return n;
  }
  createLocalSetting(t, e) {
    return this.createSetting(t, e, "Local");
  }
  createRegExpSetting(t, e, r, s) {
    if (!this.#D.get(t)) {
      this.#D.set(t, new ws(t, e, this.#W, this.storageFromType(s), r));
    }
    return this.#D.get(t);
  }
  clearAll() {
    this.globalStorage.removeAll();
    this.syncedStorage.removeAll();
    this.localStorage.removeAll();
    (new bs).resetToCurrent();
  }
  storageFromType(t) {
    switch (t) {
     case "Local":
      return this.localStorage;

     case "Session":
      return this.#M;

     case "Global":
      return this.globalStorage;

     case "Synced":
      return this.syncedStorage;
    }
    return this.globalStorage;
  }
  getRegistry() {
    return this.#D;
  }
};

var ds = {
  register: () => {},
  set: () => {},
  get: () => Promise.resolve(""),
  remove: () => {},
  clear: () => {}
};

var ps = class {
  constructor(t, e = ds, r = "") {
    this.object = t;
    this.backingStore = e;
    this.storagePrefix = r;
  }
  register(t) {
    t = this.storagePrefix + t;
    this.backingStore.register(t);
  }
  set(t, e) {
    t = this.storagePrefix + t;
    this.object[t] = e;
    this.backingStore.set(t, e);
  }
  has(t) {
    t = this.storagePrefix + t;
    return t in this.object;
  }
  get(t) {
    t = this.storagePrefix + t;
    return this.object[t];
  }
  async forceGet(t) {
    const e = this.storagePrefix + t;
    const r = await this.backingStore.get(e);
    if (r && r !== this.object[e]) {
      this.set(t, r);
    } else if (!r) {
      this.remove(t);
    }
    return r;
  }
  remove(t) {
    t = this.storagePrefix + t;
    delete this.object[t];
    this.backingStore.remove(t);
  }
  removeAll() {
    this.object = {};
    this.backingStore.clear();
  }
  keys() {
    return Object.keys(this.object);
  }
  dumpSizes() {
    Xe.instance().log("Ten largest settings: ");
    const t = {
      __proto__: null
    };
    for (const e in this.object) {
      t[e] = this.object[e].length;
    }
    const e = Object.keys(t);
    function r(e, r) {
      return t[r] - t[e];
    }
    e.sort(r);
    for (let r = 0; r < 10 && r < e.length; ++r) {
      Xe.instance().log("Setting: '" + e[r] + "', size: " + t[e[r]]);
    }
  }
};

function fs(t) {
  const e = t.name;
  const r = gs.instance();
  r.getRegistry().delete(e);
  r.moduleSettings.delete(e);
  t.storage.remove(e);
}

var ms = class {
  disabled;
  warning;
  experiment;
  constructor({deprecationNotice: t}) {
    if (!t) {
      throw new Error("Cannot create deprecation info for a non-deprecated setting");
    }
    this.disabled = t.disabled;
    this.warning = t.warning();
    this.experiment = t.experiment ? hs.Runtime.experiments.allConfigurableExperiments().find((e => e.name === t.experiment)) : void 0;
  }
};

var ys = class {
  constructor(t, e, r, s) {
    this.name = t;
    this.defaultValue = e;
    this.eventSupport = r;
    this.storage = s;
    s.register(this.name);
  }
  #F;
  #N;
  #U=null;
  #j;
  #_;
  #H=JSON;
  #$;
  #q;
  #Y=null;
  setSerializer(t) {
    this.#H = t;
  }
  addChangeListener(t, e) {
    return this.eventSupport.addEventListener(this.name, t, e);
  }
  removeChangeListener(t, e) {
    this.eventSupport.removeEventListener(this.name, t, e);
  }
  title() {
    if (this.#N) {
      return this.#N;
    }
    if (this.#F) {
      return this.#F();
    }
    return "";
  }
  setTitleFunction(t) {
    if (t) {
      this.#F = t;
    }
  }
  setTitle(t) {
    this.#N = t;
  }
  setRequiresUserAction(t) {
    this.#j = t;
  }
  disabled() {
    if (this.#U?.disabledCondition) {
      const {disabled: t} = this.#U.disabledCondition(gs.instance().getHostConfig());
      if (t) {
        return true;
      }
    }
    return this.#q || false;
  }
  disabledReason() {
    if (this.#U?.disabledCondition) {
      const t = this.#U.disabledCondition(gs.instance().getHostConfig());
      if (t.disabled) {
        return t.reason;
      }
    }
    return void 0;
  }
  setDisabled(t) {
    this.#q = t;
    this.eventSupport.dispatchEventToListeners(this.name);
  }
  get() {
    if (this.#j && !this.#$) {
      return this.defaultValue;
    }
    if (typeof this.#_ !== "undefined") {
      return this.#_;
    }
    this.#_ = this.defaultValue;
    if (this.storage.has(this.name)) {
      try {
        this.#_ = this.#H.parse(this.storage.get(this.name));
      } catch (t) {
        this.storage.remove(this.name);
      }
    }
    return this.#_;
  }
  getIfNotDisabled() {
    if (this.disabled()) {
      return;
    }
    return this.get();
  }
  async forceGet() {
    const t = this.name;
    const e = this.storage.get(t);
    const r = await this.storage.forceGet(t);
    this.#_ = this.defaultValue;
    if (r) {
      try {
        this.#_ = this.#H.parse(r);
      } catch (t) {
        this.storage.remove(this.name);
      }
    }
    if (e !== r) {
      this.eventSupport.dispatchEventToListeners(this.name, this.#_);
    }
    return this.#_;
  }
  set(t) {
    this.#$ = true;
    this.#_ = t;
    try {
      const e = this.#H.stringify(t);
      try {
        this.storage.set(this.name, e);
      } catch (t) {
        this.printSettingsSavingError(t.message, this.name, e);
      }
    } catch (t) {
      Xe.instance().error("Cannot stringify setting with name: " + this.name + ", error: " + t.message);
    }
    this.eventSupport.dispatchEventToListeners(this.name, t);
  }
  setRegistration(t) {
    this.#U = t;
    const {deprecationNotice: e} = t;
    if (e?.disabled) {
      const t = e.experiment ? hs.Runtime.experiments.allConfigurableExperiments().find((t => t.name === e.experiment)) : void 0;
      if (!t || t.isEnabled()) {
        this.set(this.defaultValue);
        this.setDisabled(true);
      }
    }
  }
  type() {
    if (this.#U) {
      return this.#U.settingType;
    }
    return null;
  }
  options() {
    if (this.#U && this.#U.options) {
      return this.#U.options.map((t => {
        const {value: e, title: r, text: s, raw: n} = t;
        return {
          value: e,
          title: r(),
          text: typeof s === "function" ? s() : s,
          raw: n
        };
      }));
    }
    return [];
  }
  reloadRequired() {
    if (this.#U) {
      return this.#U.reloadRequired || null;
    }
    return null;
  }
  category() {
    if (this.#U) {
      return this.#U.category || null;
    }
    return null;
  }
  tags() {
    if (this.#U && this.#U.tags) {
      return this.#U.tags.map((t => t())).join("\0");
    }
    return null;
  }
  order() {
    if (this.#U) {
      return this.#U.order || null;
    }
    return null;
  }
  learnMore() {
    return this.#U?.learnMore ?? null;
  }
  get deprecation() {
    if (!this.#U || !this.#U.deprecationNotice) {
      return null;
    }
    if (!this.#Y) {
      this.#Y = new ms(this.#U);
    }
    return this.#Y;
  }
  printSettingsSavingError(t, e, r) {
    const s = "Error saving setting with name: " + this.name + ", value length: " + r.length + ". Error: " + t;
    console.error(s);
    Xe.instance().error(s);
    this.storage.dumpSizes();
  }
};

var ws = class extends ys {
  #Z;
  #K;
  constructor(t, e, r, s, n) {
    super(t, e ? [ {
      pattern: e
    } ] : [], r, s);
    this.#Z = n;
  }
  get() {
    const t = [];
    const e = this.getAsArray();
    for (let r = 0; r < e.length; ++r) {
      const s = e[r];
      if (s.pattern && !s.disabled) {
        t.push(s.pattern);
      }
    }
    return t.join("|");
  }
  getAsArray() {
    return super.get();
  }
  set(t) {
    this.setAsArray([ {
      pattern: t,
      disabled: false
    } ]);
  }
  setAsArray(t) {
    this.#K = void 0;
    super.set(t);
  }
  asRegExp() {
    if (typeof this.#K !== "undefined") {
      return this.#K;
    }
    this.#K = null;
    try {
      const t = this.get();
      if (t) {
        this.#K = new RegExp(t, this.#Z || "");
      }
    } catch (t) {}
    return this.#K;
  }
};

var bs = class t {
  static GLOBAL_VERSION_SETTING_NAME="inspectorVersion";
  static SYNCED_VERSION_SETTING_NAME="syncedInspectorVersion";
  static LOCAL_VERSION_SETTING_NAME="localInspectorVersion";
  static CURRENT_VERSION=38;
  #J;
  #Q;
  #tt;
  constructor() {
    this.#J = gs.instance().createSetting(t.GLOBAL_VERSION_SETTING_NAME, t.CURRENT_VERSION, "Global");
    this.#Q = gs.instance().createSetting(t.SYNCED_VERSION_SETTING_NAME, t.CURRENT_VERSION, "Synced");
    this.#tt = gs.instance().createSetting(t.LOCAL_VERSION_SETTING_NAME, t.CURRENT_VERSION, "Local");
  }
  resetToCurrent() {
    this.#J.set(t.CURRENT_VERSION);
    this.#Q.set(t.CURRENT_VERSION);
    this.#tt.set(t.CURRENT_VERSION);
  }
  updateVersion() {
    const e = t.CURRENT_VERSION;
    const r = Math.min(this.#J.get(), this.#Q.get(), this.#tt.get());
    const s = this.methodsToRunToUpdateVersion(r, e);
    console.assert(this[`updateVersionFrom${e}To${e + 1}`] === void 0, "Unexpected migration method found. Increment CURRENT_VERSION or remove the method.");
    for (const t of s) {
      this[t].call(this);
    }
    this.resetToCurrent();
  }
  methodsToRunToUpdateVersion(t, e) {
    const r = [];
    for (let s = t; s < e; ++s) {
      r.push("updateVersionFrom" + s + "To" + (s + 1));
    }
    return r;
  }
  updateVersionFrom0To1() {
    this.clearBreakpointsWhenTooMany(gs.instance().createLocalSetting("breakpoints", []), 5e5);
  }
  updateVersionFrom1To2() {
    gs.instance().createSetting("previouslyViewedFiles", []).set([]);
  }
  updateVersionFrom2To3() {
    gs.instance().createSetting("fileSystemMapping", {}).set({});
    fs(gs.instance().createSetting("fileMappingEntries", []));
  }
  updateVersionFrom3To4() {
    const t = gs.instance().createSetting("showHeaSnapshotObjectsHiddenProperties", false);
    vs("showAdvancedHeapSnapshotProperties").set(t.get());
    fs(t);
  }
  updateVersionFrom4To5() {
    const t = {
      FileSystemViewSidebarWidth: "fileSystemViewSplitViewState",
      elementsSidebarWidth: "elementsPanelSplitViewState",
      StylesPaneSplitRatio: "stylesPaneSplitViewState",
      heapSnapshotRetainersViewSize: "heapSnapshotSplitViewState",
      "InspectorView.splitView": "InspectorView.splitViewState",
      "InspectorView.screencastSplitView": "InspectorView.screencastSplitViewState",
      "Inspector.drawerSplitView": "Inspector.drawerSplitViewState",
      layerDetailsSplitView: "layerDetailsSplitViewState",
      networkSidebarWidth: "networkPanelSplitViewState",
      sourcesSidebarWidth: "sourcesPanelSplitViewState",
      scriptsPanelNavigatorSidebarWidth: "sourcesPanelNavigatorSplitViewState",
      sourcesPanelSplitSidebarRatio: "sourcesPanelDebuggerSidebarSplitViewState",
      "timeline-details": "timelinePanelDetailsSplitViewState",
      "timeline-split": "timelinePanelRecorsSplitViewState",
      "timeline-view": "timelinePanelTimelineStackSplitViewState",
      auditsSidebarWidth: "auditsPanelSplitViewState",
      layersSidebarWidth: "layersPanelSplitViewState",
      profilesSidebarWidth: "profilesPanelSplitViewState",
      resourcesSidebarWidth: "resourcesPanelSplitViewState"
    };
    const e = {};
    for (const r in t) {
      const s = t[r];
      const n = r + "H";
      let i = null;
      const a = gs.instance().createSetting(r, e);
      if (a.get() !== e) {
        i = i || {};
        i.vertical = {};
        i.vertical.size = a.get();
        fs(a);
      }
      const o = gs.instance().createSetting(n, e);
      if (o.get() !== e) {
        i = i || {};
        i.horizontal = {};
        i.horizontal.size = o.get();
        fs(o);
      }
      if (i) {
        gs.instance().createSetting(s, {}).set(i);
      }
    }
  }
  updateVersionFrom5To6() {
    const t = {
      debuggerSidebarHidden: "sourcesPanelSplitViewState",
      navigatorHidden: "sourcesPanelNavigatorSplitViewState",
      "WebInspector.Drawer.showOnLoad": "Inspector.drawerSplitViewState"
    };
    for (const e in t) {
      const r = gs.instance().createSetting(e, null);
      if (r.get() === null) {
        fs(r);
        continue;
      }
      const s = t[e];
      const n = e === "WebInspector.Drawer.showOnLoad";
      const i = r.get() !== n;
      fs(r);
      const a = i ? "OnlyMain" : "Both";
      const o = gs.instance().createSetting(s, {});
      const l = o.get() || {};
      l.vertical = l.vertical || {};
      l.vertical.showMode = a;
      l.horizontal = l.horizontal || {};
      l.horizontal.showMode = a;
      o.set(l);
    }
  }
  updateVersionFrom6To7() {
    const t = {
      sourcesPanelNavigatorSplitViewState: "sourcesPanelNavigatorSplitViewState",
      elementsPanelSplitViewState: "elementsPanelSplitViewState",
      stylesPaneSplitViewState: "stylesPaneSplitViewState",
      sourcesPanelDebuggerSidebarSplitViewState: "sourcesPanelDebuggerSidebarSplitViewState"
    };
    const e = {};
    for (const r in t) {
      const t = gs.instance().createSetting(r, e);
      const s = t.get();
      if (s === e) {
        continue;
      }
      if (s.vertical && s.vertical.size && s.vertical.size < 1) {
        s.vertical.size = 0;
      }
      if (s.horizontal && s.horizontal.size && s.horizontal.size < 1) {
        s.horizontal.size = 0;
      }
      t.set(s);
    }
  }
  updateVersionFrom7To8() {}
  updateVersionFrom8To9() {
    const t = [ "skipStackFramesPattern", "workspaceFolderExcludePattern" ];
    for (let e = 0; e < t.length; ++e) {
      const r = gs.instance().createSetting(t[e], "");
      let s = r.get();
      if (!s) {
        return;
      }
      if (typeof s === "string") {
        s = [ s ];
      }
      for (let t = 0; t < s.length; ++t) {
        if (typeof s[t] === "string") {
          s[t] = {
            pattern: s[t]
          };
        }
      }
      r.set(s);
    }
  }
  updateVersionFrom9To10() {
    if (!window.localStorage) {
      return;
    }
    for (const t in window.localStorage) {
      if (t.startsWith("revision-history")) {
        window.localStorage.removeItem(t);
      }
    }
  }
  updateVersionFrom10To11() {
    const t = "customDevicePresets";
    const e = "customEmulatedDeviceList";
    const r = gs.instance().createSetting(t, void 0);
    const s = r.get();
    if (!Array.isArray(s)) {
      return;
    }
    const n = [];
    for (let t = 0; t < s.length; ++t) {
      const e = s[t];
      const r = {};
      r["title"] = e["title"];
      r["type"] = "unknown";
      r["user-agent"] = e["userAgent"];
      r["capabilities"] = [];
      if (e["touch"]) {
        r["capabilities"].push("touch");
      }
      if (e["mobile"]) {
        r["capabilities"].push("mobile");
      }
      r["screen"] = {};
      r["screen"]["vertical"] = {
        width: e["width"],
        height: e["height"]
      };
      r["screen"]["horizontal"] = {
        width: e["height"],
        height: e["width"]
      };
      r["screen"]["device-pixel-ratio"] = e["deviceScaleFactor"];
      r["modes"] = [];
      r["show-by-default"] = true;
      r["show"] = "Default";
      n.push(r);
    }
    if (n.length) {
      gs.instance().createSetting(e, []).set(n);
    }
    fs(r);
  }
  updateVersionFrom11To12() {
    this.migrateSettingsFromLocalStorage();
  }
  updateVersionFrom12To13() {
    this.migrateSettingsFromLocalStorage();
    fs(gs.instance().createSetting("timelineOverviewMode", ""));
  }
  updateVersionFrom13To14() {
    const t = {
      throughput: -1,
      latency: 0
    };
    gs.instance().createSetting("networkConditions", t).set(t);
  }
  updateVersionFrom14To15() {
    const t = gs.instance().createLocalSetting("workspaceExcludedFolders", {});
    const e = t.get();
    const r = {};
    for (const t in e) {
      r[t] = [];
      for (const s of e[t]) {
        r[t].push(s.path);
      }
    }
    t.set(r);
  }
  updateVersionFrom15To16() {
    const t = gs.instance().createSetting("InspectorView.panelOrder", {});
    const e = t.get();
    for (const t of Object.keys(e)) {
      e[t] = (e[t] + 1) * 10;
    }
    t.set(e);
  }
  updateVersionFrom16To17() {
    const t = gs.instance().createSetting("networkConditionsCustomProfiles", []);
    const e = t.get();
    const r = [];
    if (Array.isArray(e)) {
      for (const t of e) {
        if (typeof t.title === "string" && typeof t.value === "object" && typeof t.value.throughput === "number" && typeof t.value.latency === "number") {
          r.push({
            title: t.title,
            value: {
              download: t.value.throughput,
              upload: t.value.throughput,
              latency: t.value.latency
            }
          });
        }
      }
    }
    t.set(r);
  }
  updateVersionFrom17To18() {
    const t = gs.instance().createLocalSetting("workspaceExcludedFolders", {});
    const e = t.get();
    const r = {};
    for (const t in e) {
      let s = t.replace(/\\/g, "/");
      if (!s.startsWith("file://")) {
        if (s.startsWith("/")) {
          s = "file://" + s;
        } else {
          s = "file:///" + s;
        }
      }
      r[s] = e[t];
    }
    t.set(r);
  }
  updateVersionFrom18To19() {
    const t = {
      status: true,
      type: true,
      initiator: true,
      size: true,
      time: true
    };
    const e = gs.instance().createSetting("networkLogColumnsVisibility", t);
    const r = e.get();
    r.name = true;
    r.timeline = true;
    const s = {};
    for (const t in r) {
      if (!r.hasOwnProperty(t)) {
        continue;
      }
      s[t.toLowerCase()] = {
        visible: r[t]
      };
    }
    const n = gs.instance().createSetting("networkLogColumns", {});
    n.set(s);
    fs(e);
  }
  updateVersionFrom19To20() {
    const t = gs.instance().createSetting("InspectorView.panelOrder", {});
    const e = gs.instance().createSetting("panel-tabOrder", {});
    e.set(t.get());
    fs(t);
  }
  updateVersionFrom20To21() {
    const t = gs.instance().createSetting("networkLogColumns", {});
    const e = t.get();
    delete e["timeline"];
    delete e["waterfall"];
    t.set(e);
  }
  updateVersionFrom21To22() {
    const t = gs.instance().createLocalSetting("breakpoints", []);
    const e = t.get();
    for (const t of e) {
      t["url"] = t["sourceFileId"];
      delete t["sourceFileId"];
    }
    t.set(e);
  }
  updateVersionFrom22To23() {}
  updateVersionFrom23To24() {
    const t = gs.instance().createSetting("searchInContentScripts", false);
    const e = gs.instance().createSetting("searchInAnonymousAndContentScripts", false);
    e.set(t.get());
    fs(t);
  }
  updateVersionFrom24To25() {
    const t = {
      status: true,
      type: true,
      initiator: true,
      size: true,
      time: true
    };
    const e = gs.instance().createSetting("networkLogColumns", t);
    const r = e.get();
    delete r.product;
    e.set(r);
  }
  updateVersionFrom25To26() {
    const t = gs.instance().createSetting("messageURLFilters", {});
    const e = Object.keys(t.get());
    const r = e.map((t => `-url:${t}`)).join(" ");
    if (r) {
      const t = gs.instance().createSetting("console.textFilter", "");
      const e = t.get() ? ` ${t.get()}` : "";
      t.set(`${r}${e}`);
    }
    fs(t);
  }
  updateVersionFrom26To27() {
    function t(t, e, r) {
      const s = gs.instance().createSetting(t, {});
      const n = s.get();
      if (e in n) {
        n[r] = n[e];
        delete n[e];
        s.set(n);
      }
    }
    function e(t, e, r) {
      const s = gs.instance().createSetting(t, "");
      const n = s.get();
      if (n === e) {
        s.set(r);
      }
    }
    t("panel-tabOrder", "audits2", "audits");
    t("panel-closeableTabs", "audits2", "audits");
    e("panel-selectedTab", "audits2", "audits");
  }
  updateVersionFrom27To28() {
    const t = gs.instance().createSetting("uiTheme", "systemPreferred");
    if (t.get() === "default") {
      t.set("systemPreferred");
    }
  }
  updateVersionFrom28To29() {
    function t(t, e, r) {
      const s = gs.instance().createSetting(t, {});
      const n = s.get();
      if (e in n) {
        n[r] = n[e];
        delete n[e];
        s.set(n);
      }
    }
    function e(t, e, r) {
      const s = gs.instance().createSetting(t, "");
      const n = s.get();
      if (n === e) {
        s.set(r);
      }
    }
    t("panel-tabOrder", "audits", "lighthouse");
    t("panel-closeableTabs", "audits", "lighthouse");
    e("panel-selectedTab", "audits", "lighthouse");
  }
  updateVersionFrom29To30() {
    const t = gs.instance().createSetting("closeableTabs", {});
    const e = gs.instance().createSetting("panel-closeableTabs", {});
    const r = gs.instance().createSetting("drawer-view-closeableTabs", {});
    const s = e.get();
    const n = e.get();
    const i = Object.assign(n, s);
    t.set(i);
    fs(e);
    fs(r);
  }
  updateVersionFrom30To31() {
    const t = gs.instance().createSetting("recorder_recordings", []);
    fs(t);
  }
  updateVersionFrom31To32() {
    const t = gs.instance().createLocalSetting("breakpoints", []);
    const e = t.get();
    for (const t of e) {
      t["resourceTypeName"] = "script";
    }
    t.set(e);
  }
  updateVersionFrom32To33() {
    const t = gs.instance().createLocalSetting("previouslyViewedFiles", []);
    let e = t.get();
    e = e.filter((t => "url" in t));
    for (const t of e) {
      t["resourceTypeName"] = "script";
    }
    t.set(e);
  }
  updateVersionFrom33To34() {
    const t = "/** DEVTOOLS_LOGPOINT */ console.log(";
    const e = ")";
    const r = gs.instance().createLocalSetting("breakpoints", []);
    const s = r.get();
    for (const r of s) {
      const s = r.condition.startsWith(t) && r.condition.endsWith(e);
      r["isLogpoint"] = s;
    }
    r.set(s);
  }
  updateVersionFrom34To35() {
    const t = "/** DEVTOOLS_LOGPOINT */ console.log(";
    const e = ")";
    const r = gs.instance().createLocalSetting("breakpoints", []);
    const s = r.get();
    for (const r of s) {
      const {condition: s, isLogpoint: n} = r;
      if (n) {
        r.condition = s.slice(t.length, s.length - e.length);
      }
    }
    r.set(s);
  }
  updateVersionFrom35To36() {
    gs.instance().createSetting("showThirdPartyIssues", true).set(true);
  }
  updateVersionFrom36To37() {
    const t = t => {
      for (const e of t.keys()) {
        const r = gs.normalizeSettingName(e);
        if (r !== e) {
          const s = t.get(e);
          fs({
            name: e,
            storage: t
          });
          t.set(r, s);
        }
      }
    };
    t(gs.instance().globalStorage);
    t(gs.instance().syncedStorage);
    t(gs.instance().localStorage);
    for (const t of gs.instance().globalStorage.keys()) {
      if (t.startsWith("data-grid-") && t.endsWith("-column-weights") || t.endsWith("-tab-order") || t === "views-location-override" || t === "closeable-tabs") {
        const e = gs.instance().createSetting(t, {});
        e.set(cs.StringUtilities.toKebabCaseKeys(e.get()));
      }
      if (t.endsWith("-selected-tab")) {
        const e = gs.instance().createSetting(t, "");
        e.set(cs.StringUtilities.toKebabCase(e.get()));
      }
    }
  }
  updateVersionFrom37To38() {
    const t = () => {
      try {
        return vs("console-insights-enabled");
      } catch {
        return;
      }
    };
    const e = t();
    const r = gs.instance().createLocalSetting("console-insights-onboarding-finished", false);
    if (e && e.get() === true && r.get() === false) {
      e.set(false);
    }
    if (e && e.get() === false) {
      r.set(false);
    }
  }
  migrateSettingsFromLocalStorage() {
    const t = new Set([ "advancedSearchConfig", "breakpoints", "consoleHistory", "domBreakpoints", "eventListenerBreakpoints", "fileSystemMapping", "lastSelectedSourcesSidebarPaneTab", "previouslyViewedFiles", "savedURLs", "watchExpressions", "workspaceExcludedFolders", "xhrBreakpoints" ]);
    if (!window.localStorage) {
      return;
    }
    for (const e in window.localStorage) {
      if (t.has(e)) {
        continue;
      }
      const r = window.localStorage[e];
      window.localStorage.removeItem(e);
      gs.instance().globalStorage.set(e, r);
    }
  }
  clearBreakpointsWhenTooMany(t, e) {
    if (t.get().length > e) {
      t.set([]);
    }
  }
};

var Ss = (t => {
  t["SYNCED"] = "Synced";
  t["GLOBAL"] = "Global";
  t["LOCAL"] = "Local";
  t["SESSION"] = "Session";
  return t;
})(Ss || {});

function vs(t) {
  return gs.instance().moduleSetting(t);
}

function xs(t) {
  return gs.instance().settingForTest(t);
}

var Rs = {};

o(Rs, {
  SimpleHistoryManager: () => Ts
});

var Ts = class {
  #et;
  #rt;
  #st;
  #nt;
  constructor(t) {
    this.#et = [];
    this.#rt = -1;
    this.#st = 0;
    this.#nt = t;
  }
  readOnlyLock() {
    ++this.#st;
  }
  releaseReadOnlyLock() {
    --this.#st;
  }
  getPreviousValidIndex() {
    if (this.empty()) {
      return -1;
    }
    let t = this.#rt - 1;
    while (t >= 0 && !this.#et[t].valid()) {
      --t;
    }
    if (t < 0) {
      return -1;
    }
    return t;
  }
  getNextValidIndex() {
    let t = this.#rt + 1;
    while (t < this.#et.length && !this.#et[t].valid()) {
      ++t;
    }
    if (t >= this.#et.length) {
      return -1;
    }
    return t;
  }
  readOnly() {
    return Boolean(this.#st);
  }
  filterOut(t) {
    if (this.readOnly()) {
      return;
    }
    const e = [];
    let r = 0;
    for (let s = 0; s < this.#et.length; ++s) {
      if (!t(this.#et[s])) {
        e.push(this.#et[s]);
      } else if (s <= this.#rt) {
        ++r;
      }
    }
    this.#et = e;
    this.#rt = Math.max(0, this.#rt - r);
  }
  empty() {
    return !this.#et.length;
  }
  active() {
    return this.empty() ? null : this.#et[this.#rt];
  }
  push(t) {
    if (this.readOnly()) {
      return;
    }
    if (!this.empty()) {
      this.#et.splice(this.#rt + 1);
    }
    this.#et.push(t);
    if (this.#et.length > this.#nt) {
      this.#et.shift();
    }
    this.#rt = this.#et.length - 1;
  }
  canRollback() {
    return this.getPreviousValidIndex() >= 0;
  }
  canRollover() {
    return this.getNextValidIndex() >= 0;
  }
  rollback() {
    const t = this.getPreviousValidIndex();
    if (t === -1) {
      return false;
    }
    this.readOnlyLock();
    this.#rt = t;
    this.#et[t].reveal();
    this.releaseReadOnlyLock();
    return true;
  }
  rollover() {
    const t = this.getNextValidIndex();
    if (t === -1) {
      return false;
    }
    this.readOnlyLock();
    this.#rt = t;
    this.#et[t].reveal();
    this.releaseReadOnlyLock();
    return true;
  }
};

var zs = {};

o(zs, {
  StringOutputStream: () => As
});

var As = class {
  #it;
  constructor() {
    this.#it = "";
  }
  async write(t) {
    this.#it += t;
  }
  async close() {}
  data() {
    return this.#it;
  }
};

var Is = {};

o(Is, {
  TextDictionary: () => Ls
});

var Ps = {};

o(Ps, {
  Trie: () => Es
});

var Es = class t {
  #at;
  #ot;
  #lt;
  #ct;
  #ht;
  #ut;
  #gt;
  constructor(t) {
    this.#ot = 0;
    this.#gt = t;
    this.clear();
  }
  static newStringTrie() {
    return new t({
      empty: () => "",
      append: (t, e) => t + e,
      slice: (t, e, r) => t.slice(e, r)
    });
  }
  static newArrayTrie() {
    return new t({
      empty: () => [],
      append: (t, e) => t.concat([ e ]),
      slice: (t, e, r) => t.slice(e, r)
    });
  }
  add(t) {
    let e = this.#ot;
    ++this.#ht[this.#ot];
    for (let r = 0; r < t.length; ++r) {
      const s = t[r];
      let n = this.#lt[e].get(s);
      if (!n) {
        if (this.#ut.length) {
          n = this.#ut.pop();
        } else {
          n = this.#at++;
          this.#ct.push(false);
          this.#ht.push(0);
          this.#lt.push(new Map);
        }
        this.#lt[e].set(s, n);
      }
      ++this.#ht[n];
      e = n;
    }
    this.#ct[e] = true;
  }
  remove(t) {
    if (!this.has(t)) {
      return false;
    }
    let e = this.#ot;
    --this.#ht[this.#ot];
    for (let r = 0; r < t.length; ++r) {
      const s = t[r];
      const n = this.#lt[e].get(s);
      if (! --this.#ht[n]) {
        this.#lt[e].delete(s);
        this.#ut.push(n);
      }
      e = n;
    }
    this.#ct[e] = false;
    return true;
  }
  has(t) {
    let e = this.#ot;
    for (let r = 0; r < t.length; ++r) {
      e = this.#lt[e].get(t[r]);
      if (!e) {
        return false;
      }
    }
    return this.#ct[e];
  }
  words(t) {
    t = t ?? this.#gt.empty();
    let e = this.#ot;
    for (let r = 0; r < t.length; ++r) {
      e = this.#lt[e].get(t[r]);
      if (!e) {
        return [];
      }
    }
    const r = [];
    this.dfs(e, t, r);
    return r;
  }
  dfs(t, e, r) {
    if (this.#ct[t]) {
      r.push(e);
    }
    const s = this.#lt[t];
    for (const [t, n] of s) {
      const s = this.#gt.append(e, t);
      this.dfs(n, s, r);
    }
  }
  longestPrefix(t, e) {
    let r = this.#ot;
    let s = 0;
    for (let n = 0; n < t.length; ++n) {
      r = this.#lt[r].get(t[n]);
      if (!r) {
        break;
      }
      if (!e || this.#ct[r]) {
        s = n + 1;
      }
    }
    return this.#gt.slice(t, 0, s);
  }
  clear() {
    this.#at = 1;
    this.#ot = 0;
    this.#lt = [ new Map ];
    this.#ct = [ false ];
    this.#ht = [ 0 ];
    this.#ut = [];
  }
};

var Ls = class {
  words;
  index;
  constructor() {
    this.words = new Map;
    this.index = Es.newStringTrie();
  }
  addWord(t) {
    let e = this.words.get(t) || 0;
    ++e;
    this.words.set(t, e);
    this.index.add(t);
  }
  removeWord(t) {
    let e = this.words.get(t) || 0;
    if (!e) {
      return;
    }
    if (e === 1) {
      this.words.delete(t);
      this.index.remove(t);
      return;
    }
    --e;
    this.words.set(t, e);
  }
  wordsWithPrefix(t) {
    return this.index.words(t);
  }
  hasWord(t) {
    return this.words.has(t);
  }
  wordCount(t) {
    return this.words.get(t) || 0;
  }
  reset() {
    this.words.clear();
    this.index.clear();
  }
};

var ks = {};

o(ks, {
  Scheduling: () => Ns,
  Throttler: () => Cs
});

var Cs = class {
  #dt;
  #pt;
  #ft;
  #mt;
  #yt;
  #wt;
  #bt;
  #St;
  constructor(t) {
    this.#dt = t;
    this.#pt = false;
    this.#ft = false;
    this.#mt = null;
    this.#yt = 0;
    this.#wt = new Promise((t => {
      this.#bt = t;
    }));
  }
  #vt() {
    this.#yt = this.getTime();
    this.#pt = false;
    if (this.#mt) {
      this.innerSchedule(false);
    }
    this.processCompletedForTests();
  }
  processCompletedForTests() {}
  get process() {
    return this.#mt;
  }
  get processCompleted() {
    return this.#mt ? this.#wt : null;
  }
  onTimeout() {
    this.#St = void 0;
    this.#ft = false;
    this.#pt = true;
    void Promise.resolve().then(this.#mt).catch(console.error.bind(console)).then(this.#vt.bind(this)).then(this.#bt);
    this.#wt = new Promise((t => {
      this.#bt = t;
    }));
    this.#mt = null;
  }
  schedule(t, e = "Default") {
    this.#mt = t;
    const r = Boolean(this.#St) || this.#pt;
    const s = this.getTime() - this.#yt > this.#dt;
    const n = e === "AsSoonAsPossible" || e === "Default" && !r && s;
    const i = n && !this.#ft;
    this.#ft = this.#ft || n;
    this.innerSchedule(i);
    return this.#wt;
  }
  innerSchedule(t) {
    if (this.#pt) {
      return;
    }
    if (this.#St && !t) {
      return;
    }
    if (this.#St) {
      this.clearTimeout(this.#St);
    }
    const e = this.#ft ? 0 : this.#dt;
    this.#St = this.setTimeout(this.onTimeout.bind(this), e);
  }
  clearTimeout(t) {
    clearTimeout(t);
  }
  setTimeout(t, e) {
    return window.setTimeout(t, e);
  }
  getTime() {
    return window.performance.now();
  }
};

var Ns = (t => {
  t["DEFAULT"] = "Default";
  t["AS_SOON_AS_POSSIBLE"] = "AsSoonAsPossible";
  t["DELAYED"] = "Delayed";
  return t;
})(Ns || {});

var Os = {};

o(Os, {
  WorkerWrapper: () => Bs
});

var Bs = class t {
  #xt;
  #Rt;
  constructor(t) {
    this.#xt = new Promise((e => {
      const r = new Worker(t, {
        type: "module"
      });
      r.onmessage = t => {
        console.assert(t.data === "workerReady");
        r.onmessage = null;
        e(r);
      };
    }));
  }
  static fromURL(e) {
    return new t(e);
  }
  postMessage(t) {
    void this.#xt.then((e => {
      if (!this.#Rt) {
        e.postMessage(t);
      }
    }));
  }
  dispose() {
    this.#Rt = true;
    void this.#xt.then((t => t.terminate()));
  }
  terminate() {
    this.dispose();
  }
  set onmessage(t) {
    void this.#xt.then((e => {
      e.onmessage = t;
    }));
  }
  set onerror(t) {
    void this.#xt.then((e => {
      e.onerror = t;
    }));
  }
};

import { UIString as Gs } from "./../platform/platform.js";

export { d as App, p as AppProvider, b as Base64, T as CharacterIdMap, A as Color, P as ColorConverter, Z as ColorUtils, ze as Console, He as Debouncer, qe as EventTarget, Ke as JavaScriptMetaData, Je as Lazy, rr as Linkifier, or as Mutex, Ae as ObjectWrapper, cr as ParsedURL, pr as Progress, br as QueryParamHandler, Sr as ResolverBase, xr as ResourceType, Ee as Revealer, Or as Runnable, Fr as SegmentedRange, Hr as SettingRegistration, ls as Settings, Rs as SimpleHistoryManager, zs as StringOutputStream, Is as TextDictionary, ks as Throttler, Ps as Trie, Gs as UIString, Os as Worker };
//# sourceMappingURL=common-formatted.min.js.map